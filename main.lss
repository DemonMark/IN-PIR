
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000150a  0000159e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000150a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000633  00800120  00800120  000015be  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000015be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006c4  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001529  00000000  00000000  00001d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b1e  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00005320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b6  00000000  00000000  00005640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a27  00000000  00000000  00005cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__vector_18>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      68:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      6c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      70:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      74:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

0000007c <arpreqhdr>:
      7c:	00 01 08 00 06 04 00 01                             ........

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf ef       	ldi	r28, 0xFF	; 255
      8a:	d0 e1       	ldi	r29, 0x10	; 16
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	11 e0       	ldi	r17, 0x01	; 1
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	ea e0       	ldi	r30, 0x0A	; 10
      98:	f5 e1       	ldi	r31, 0x15	; 21
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <.do_copy_data_start>

0000009c <.do_copy_data_loop>:
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0

000000a0 <.do_copy_data_start>:
      a0:	a0 32       	cpi	r26, 0x20	; 32
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <.do_copy_data_loop>

000000a6 <__do_clear_bss>:
      a6:	17 e0       	ldi	r17, 0x07	; 7
      a8:	a0 e2       	ldi	r26, 0x20	; 32
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a3 35       	cpi	r26, 0x53	; 83
      b2:	b1 07       	cpc	r27, r17
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <main>
      ba:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <enc28j60ReadOp>:
      c2:	2c 98       	cbi	0x05, 4	; 5
      c4:	96 2f       	mov	r25, r22
      c6:	9f 71       	andi	r25, 0x1F	; 31
      c8:	98 2b       	or	r25, r24
      ca:	9e bd       	out	0x2e, r25	; 46
      cc:	0d b4       	in	r0, 0x2d	; 45
      ce:	07 fe       	sbrs	r0, 7
      d0:	fd cf       	rjmp	.-6      	; 0xcc <enc28j60ReadOp+0xa>
      d2:	1e bc       	out	0x2e, r1	; 46
      d4:	0d b4       	in	r0, 0x2d	; 45
      d6:	07 fe       	sbrs	r0, 7
      d8:	fd cf       	rjmp	.-6      	; 0xd4 <enc28j60ReadOp+0x12>
      da:	67 ff       	sbrs	r22, 7
      dc:	04 c0       	rjmp	.+8      	; 0xe6 <enc28j60ReadOp+0x24>
      de:	1e bc       	out	0x2e, r1	; 46
      e0:	0d b4       	in	r0, 0x2d	; 45
      e2:	07 fe       	sbrs	r0, 7
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <enc28j60ReadOp+0x1e>
      e6:	2c 9a       	sbi	0x05, 4	; 5
      e8:	8e b5       	in	r24, 0x2e	; 46
      ea:	08 95       	ret

000000ec <enc28j60WriteOp>:
      ec:	2c 98       	cbi	0x05, 4	; 5
      ee:	6f 71       	andi	r22, 0x1F	; 31
      f0:	68 2b       	or	r22, r24
      f2:	6e bd       	out	0x2e, r22	; 46
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <enc28j60WriteOp+0x8>
      fa:	4e bd       	out	0x2e, r20	; 46
      fc:	0d b4       	in	r0, 0x2d	; 45
      fe:	07 fe       	sbrs	r0, 7
     100:	fd cf       	rjmp	.-6      	; 0xfc <enc28j60WriteOp+0x10>
     102:	2c 9a       	sbi	0x05, 4	; 5
     104:	08 95       	ret

00000106 <enc28j60ReadBuffer>:
     106:	ac 01       	movw	r20, r24
     108:	fb 01       	movw	r30, r22
     10a:	2c 98       	cbi	0x05, 4	; 5
     10c:	8a e3       	ldi	r24, 0x3A	; 58
     10e:	8e bd       	out	0x2e, r24	; 46
     110:	0d b4       	in	r0, 0x2d	; 45
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <enc28j60ReadBuffer+0xa>
     116:	9a 01       	movw	r18, r20
     118:	df 01       	movw	r26, r30
     11a:	08 c0       	rjmp	.+16     	; 0x12c <enc28j60ReadBuffer+0x26>
     11c:	1e bc       	out	0x2e, r1	; 46
     11e:	0d b4       	in	r0, 0x2d	; 45
     120:	07 fe       	sbrs	r0, 7
     122:	fd cf       	rjmp	.-6      	; 0x11e <enc28j60ReadBuffer+0x18>
     124:	21 50       	subi	r18, 0x01	; 1
     126:	30 40       	sbci	r19, 0x00	; 0
     128:	8e b5       	in	r24, 0x2e	; 46
     12a:	8d 93       	st	X+, r24
     12c:	21 15       	cp	r18, r1
     12e:	31 05       	cpc	r19, r1
     130:	a9 f7       	brne	.-22     	; 0x11c <enc28j60ReadBuffer+0x16>
     132:	e4 0f       	add	r30, r20
     134:	f5 1f       	adc	r31, r21
     136:	10 82       	st	Z, r1
     138:	2c 9a       	sbi	0x05, 4	; 5
     13a:	08 95       	ret

0000013c <enc28j60WriteBuffer>:
     13c:	9c 01       	movw	r18, r24
     13e:	fb 01       	movw	r30, r22
     140:	2c 98       	cbi	0x05, 4	; 5
     142:	8a e7       	ldi	r24, 0x7A	; 122
     144:	8e bd       	out	0x2e, r24	; 46
     146:	0d b4       	in	r0, 0x2d	; 45
     148:	07 fe       	sbrs	r0, 7
     14a:	fd cf       	rjmp	.-6      	; 0x146 <enc28j60WriteBuffer+0xa>
     14c:	08 c0       	rjmp	.+16     	; 0x15e <enc28j60WriteBuffer+0x22>
     14e:	80 81       	ld	r24, Z
     150:	8e bd       	out	0x2e, r24	; 46
     152:	0d b4       	in	r0, 0x2d	; 45
     154:	07 fe       	sbrs	r0, 7
     156:	fd cf       	rjmp	.-6      	; 0x152 <enc28j60WriteBuffer+0x16>
     158:	21 50       	subi	r18, 0x01	; 1
     15a:	30 40       	sbci	r19, 0x00	; 0
     15c:	31 96       	adiw	r30, 0x01	; 1
     15e:	21 15       	cp	r18, r1
     160:	31 05       	cpc	r19, r1
     162:	a9 f7       	brne	.-22     	; 0x14e <enc28j60WriteBuffer+0x12>
     164:	2c 9a       	sbi	0x05, 4	; 5
     166:	08 95       	ret

00000168 <enc28j60SetBank>:
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	18 2f       	mov	r17, r24
     170:	c8 2f       	mov	r28, r24
     172:	d0 e0       	ldi	r29, 0x00	; 0
     174:	c0 76       	andi	r28, 0x60	; 96
     176:	d0 70       	andi	r29, 0x00	; 0
     178:	80 91 20 01 	lds	r24, 0x0120
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	c8 17       	cp	r28, r24
     180:	d9 07       	cpc	r29, r25
     182:	91 f0       	breq	.+36     	; 0x1a8 <enc28j60SetBank+0x40>
     184:	80 ea       	ldi	r24, 0xA0	; 160
     186:	6f e1       	ldi	r22, 0x1F	; 31
     188:	43 e0       	ldi	r20, 0x03	; 3
     18a:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     18e:	85 e0       	ldi	r24, 0x05	; 5
     190:	d5 95       	asr	r29
     192:	c7 95       	ror	r28
     194:	8a 95       	dec	r24
     196:	e1 f7       	brne	.-8      	; 0x190 <enc28j60SetBank+0x28>
     198:	80 e8       	ldi	r24, 0x80	; 128
     19a:	6f e1       	ldi	r22, 0x1F	; 31
     19c:	4c 2f       	mov	r20, r28
     19e:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     1a2:	10 76       	andi	r17, 0x60	; 96
     1a4:	10 93 20 01 	sts	0x0120, r17
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	08 95       	ret

000001b0 <enc28j60Read>:
     1b0:	1f 93       	push	r17
     1b2:	18 2f       	mov	r17, r24
     1b4:	0e 94 b4 00 	call	0x168	; 0x168 <enc28j60SetBank>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	61 2f       	mov	r22, r17
     1bc:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     1c0:	1f 91       	pop	r17
     1c2:	08 95       	ret

000001c4 <enc28j60Write>:
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	18 2f       	mov	r17, r24
     1ca:	06 2f       	mov	r16, r22
     1cc:	0e 94 b4 00 	call	0x168	; 0x168 <enc28j60SetBank>
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	61 2f       	mov	r22, r17
     1d4:	40 2f       	mov	r20, r16
     1d6:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	08 95       	ret

000001e0 <enc28j60PhyReadH>:
     1e0:	68 2f       	mov	r22, r24
     1e2:	84 ed       	ldi	r24, 0xD4	; 212
     1e4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     1e8:	82 ed       	ldi	r24, 0xD2	; 210
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1f0:	80 e5       	ldi	r24, 0x50	; 80
     1f2:	8a 95       	dec	r24
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <enc28j60PhyReadH+0x12>
     1f6:	8a ee       	ldi	r24, 0xEA	; 234
     1f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     1fc:	80 fd       	sbrc	r24, 0
     1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <enc28j60PhyReadH+0x16>
     200:	82 ed       	ldi	r24, 0xD2	; 210
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     208:	89 ed       	ldi	r24, 0xD9	; 217
     20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	08 95       	ret

00000212 <enc28j60PhyWrite>:
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	98 2f       	mov	r25, r24
     218:	16 2f       	mov	r17, r22
     21a:	07 2f       	mov	r16, r23
     21c:	84 ed       	ldi	r24, 0xD4	; 212
     21e:	69 2f       	mov	r22, r25
     220:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     224:	86 ed       	ldi	r24, 0xD6	; 214
     226:	61 2f       	mov	r22, r17
     228:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     22c:	87 ed       	ldi	r24, 0xD7	; 215
     22e:	60 2f       	mov	r22, r16
     230:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     234:	10 e5       	ldi	r17, 0x50	; 80
     236:	03 c0       	rjmp	.+6      	; 0x23e <enc28j60PhyWrite+0x2c>
     238:	81 2f       	mov	r24, r17
     23a:	8a 95       	dec	r24
     23c:	f1 f7       	brne	.-4      	; 0x23a <enc28j60PhyWrite+0x28>
     23e:	8a ee       	ldi	r24, 0xEA	; 234
     240:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     244:	80 fd       	sbrc	r24, 0
     246:	f8 cf       	rjmp	.-16     	; 0x238 <enc28j60PhyWrite+0x26>
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <enc28j60clkout>:
     24e:	68 2f       	mov	r22, r24
     250:	67 70       	andi	r22, 0x07	; 7
     252:	85 e7       	ldi	r24, 0x75	; 117
     254:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     258:	08 95       	ret

0000025a <enc28j60Init>:
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	8c 01       	movw	r16, r24
     260:	24 9a       	sbi	0x04, 4	; 4
     262:	2c 9a       	sbi	0x05, 4	; 5
     264:	84 b1       	in	r24, 0x04	; 4
     266:	80 6a       	ori	r24, 0xA0	; 160
     268:	84 b9       	out	0x04, r24	; 4
     26a:	26 9a       	sbi	0x04, 6	; 4
     26c:	2d 9a       	sbi	0x05, 5	; 5
     26e:	2f 9a       	sbi	0x05, 7	; 5
     270:	80 e5       	ldi	r24, 0x50	; 80
     272:	8c bd       	out	0x2c, r24	; 44
     274:	8d b5       	in	r24, 0x2d	; 45
     276:	81 60       	ori	r24, 0x01	; 1
     278:	8d bd       	out	0x2d, r24	; 45
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	4f ef       	ldi	r20, 0xFF	; 255
     280:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     284:	8d ec       	ldi	r24, 0xCD	; 205
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <enc28j60Init+0x2c>
     28a:	10 92 22 01 	sts	0x0122, r1
     28e:	10 92 21 01 	sts	0x0121, r1
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     29a:	89 e0       	ldi	r24, 0x09	; 9
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2a2:	8c e0       	ldi	r24, 0x0C	; 12
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2aa:	8d e0       	ldi	r24, 0x0D	; 13
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2b2:	8a e0       	ldi	r24, 0x0A	; 10
     2b4:	6f ef       	ldi	r22, 0xFF	; 255
     2b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2ba:	8b e0       	ldi	r24, 0x0B	; 11
     2bc:	6f e0       	ldi	r22, 0x0F	; 15
     2be:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2ca:	85 e0       	ldi	r24, 0x05	; 5
     2cc:	60 e1       	ldi	r22, 0x10	; 16
     2ce:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2d2:	86 e0       	ldi	r24, 0x06	; 6
     2d4:	6e ef       	ldi	r22, 0xFE	; 254
     2d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2da:	87 e0       	ldi	r24, 0x07	; 7
     2dc:	6f e1       	ldi	r22, 0x1F	; 31
     2de:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2e2:	88 e3       	ldi	r24, 0x38	; 56
     2e4:	60 eb       	ldi	r22, 0xB0	; 176
     2e6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2ea:	88 e2       	ldi	r24, 0x28	; 40
     2ec:	6f e3       	ldi	r22, 0x3F	; 63
     2ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2f2:	89 e2       	ldi	r24, 0x29	; 41
     2f4:	60 e3       	ldi	r22, 0x30	; 48
     2f6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     2fa:	80 e3       	ldi	r24, 0x30	; 48
     2fc:	69 ef       	ldi	r22, 0xF9	; 249
     2fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     302:	81 e3       	ldi	r24, 0x31	; 49
     304:	67 ef       	ldi	r22, 0xF7	; 247
     306:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     30a:	80 ec       	ldi	r24, 0xC0	; 192
     30c:	6d e0       	ldi	r22, 0x0D	; 13
     30e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     312:	81 ec       	ldi	r24, 0xC1	; 193
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     31a:	80 e8       	ldi	r24, 0x80	; 128
     31c:	62 ec       	ldi	r22, 0xC2	; 194
     31e:	42 e3       	ldi	r20, 0x32	; 50
     320:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     324:	86 ec       	ldi	r24, 0xC6	; 198
     326:	62 e1       	ldi	r22, 0x12	; 18
     328:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     32c:	87 ec       	ldi	r24, 0xC7	; 199
     32e:	6c e0       	ldi	r22, 0x0C	; 12
     330:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     334:	84 ec       	ldi	r24, 0xC4	; 196
     336:	62 e1       	ldi	r22, 0x12	; 18
     338:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     33c:	8a ec       	ldi	r24, 0xCA	; 202
     33e:	6c ed       	ldi	r22, 0xDC	; 220
     340:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     344:	8b ec       	ldi	r24, 0xCB	; 203
     346:	65 e0       	ldi	r22, 0x05	; 5
     348:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     34c:	84 ee       	ldi	r24, 0xE4	; 228
     34e:	f8 01       	movw	r30, r16
     350:	60 81       	ld	r22, Z
     352:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     356:	85 ee       	ldi	r24, 0xE5	; 229
     358:	f8 01       	movw	r30, r16
     35a:	61 81       	ldd	r22, Z+1	; 0x01
     35c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     360:	82 ee       	ldi	r24, 0xE2	; 226
     362:	f8 01       	movw	r30, r16
     364:	62 81       	ldd	r22, Z+2	; 0x02
     366:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     36a:	83 ee       	ldi	r24, 0xE3	; 227
     36c:	f8 01       	movw	r30, r16
     36e:	63 81       	ldd	r22, Z+3	; 0x03
     370:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     374:	80 ee       	ldi	r24, 0xE0	; 224
     376:	f8 01       	movw	r30, r16
     378:	64 81       	ldd	r22, Z+4	; 0x04
     37a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     37e:	81 ee       	ldi	r24, 0xE1	; 225
     380:	f8 01       	movw	r30, r16
     382:	65 81       	ldd	r22, Z+5	; 0x05
     384:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     388:	80 e1       	ldi	r24, 0x10	; 16
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	0e 94 09 01 	call	0x212	; 0x212 <enc28j60PhyWrite>
     392:	8f e1       	ldi	r24, 0x1F	; 31
     394:	0e 94 b4 00 	call	0x168	; 0x168 <enc28j60SetBank>
     398:	80 e8       	ldi	r24, 0x80	; 128
     39a:	6b e1       	ldi	r22, 0x1B	; 27
     39c:	48 ec       	ldi	r20, 0xC8	; 200
     39e:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     3a2:	80 e8       	ldi	r24, 0x80	; 128
     3a4:	6f e1       	ldi	r22, 0x1F	; 31
     3a6:	44 e0       	ldi	r20, 0x04	; 4
     3a8:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <enc28j60getrev>:
     3b2:	82 e7       	ldi	r24, 0x72	; 114
     3b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     3b8:	08 95       	ret

000003ba <enc28j60linkup>:
     3ba:	81 e1       	ldi	r24, 0x11	; 17
     3bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <enc28j60PhyReadH>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	89 2b       	or	r24, r25
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <enc28j60linkup+0xe>
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	82 2f       	mov	r24, r18
     3ca:	08 95       	ret

000003cc <enc28j60PacketSend>:
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	8b 01       	movw	r16, r22
     3d8:	14 c0       	rjmp	.+40     	; 0x402 <enc28j60PacketSend+0x36>
     3da:	8c e1       	ldi	r24, 0x1C	; 28
     3dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     3e0:	81 ff       	sbrs	r24, 1
     3e2:	0f c0       	rjmp	.+30     	; 0x402 <enc28j60PacketSend+0x36>
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	6f e1       	ldi	r22, 0x1F	; 31
     3e8:	40 e8       	ldi	r20, 0x80	; 128
     3ea:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     3ee:	80 ea       	ldi	r24, 0xA0	; 160
     3f0:	6f e1       	ldi	r22, 0x1F	; 31
     3f2:	40 e8       	ldi	r20, 0x80	; 128
     3f4:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     3f8:	80 ea       	ldi	r24, 0xA0	; 160
     3fa:	6c e1       	ldi	r22, 0x1C	; 28
     3fc:	42 e0       	ldi	r20, 0x02	; 2
     3fe:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	6f e1       	ldi	r22, 0x1F	; 31
     406:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     40a:	83 fd       	sbrc	r24, 3
     40c:	e6 cf       	rjmp	.-52     	; 0x3da <enc28j60PacketSend+0xe>
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	60 e1       	ldi	r22, 0x10	; 16
     41a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     41e:	86 e0       	ldi	r24, 0x06	; 6
     420:	6c 2f       	mov	r22, r28
     422:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     426:	9e 01       	movw	r18, r28
     428:	20 50       	subi	r18, 0x00	; 0
     42a:	30 4f       	sbci	r19, 0xF0	; 240
     42c:	87 e0       	ldi	r24, 0x07	; 7
     42e:	63 2f       	mov	r22, r19
     430:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     434:	8a e7       	ldi	r24, 0x7A	; 122
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     43e:	ce 01       	movw	r24, r28
     440:	b8 01       	movw	r22, r16
     442:	0e 94 9e 00 	call	0x13c	; 0x13c <enc28j60WriteBuffer>
     446:	80 e8       	ldi	r24, 0x80	; 128
     448:	6f e1       	ldi	r22, 0x1F	; 31
     44a:	48 e0       	ldi	r20, 0x08	; 8
     44c:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	08 95       	ret

0000045a <enc28j60hasRxPkt>:
     45a:	89 e3       	ldi	r24, 0x39	; 57
     45c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     460:	81 11       	cpse	r24, r1
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	08 95       	ret

00000466 <enc28j60PacketReceive>:
     466:	8f 92       	push	r8
     468:	9f 92       	push	r9
     46a:	af 92       	push	r10
     46c:	bf 92       	push	r11
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	5c 01       	movw	r10, r24
     480:	4b 01       	movw	r8, r22
     482:	89 e3       	ldi	r24, 0x39	; 57
     484:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60Read>
     488:	88 23       	and	r24, r24
     48a:	19 f4       	brne	.+6      	; 0x492 <enc28j60PacketReceive+0x2c>
     48c:	c0 e0       	ldi	r28, 0x00	; 0
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	7a c0       	rjmp	.+244    	; 0x586 <enc28j60PacketReceive+0x120>
     492:	00 91 21 01 	lds	r16, 0x0121
     496:	10 91 22 01 	lds	r17, 0x0122
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	60 2f       	mov	r22, r16
     49e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     4a2:	01 2f       	mov	r16, r17
     4a4:	11 0f       	add	r17, r17
     4a6:	11 0b       	sbc	r17, r17
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	60 2f       	mov	r22, r16
     4ac:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     4b0:	8a e3       	ldi	r24, 0x3A	; 58
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     4b8:	18 2f       	mov	r17, r24
     4ba:	8a e3       	ldi	r24, 0x3A	; 58
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     4c2:	38 2f       	mov	r19, r24
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	e1 2e       	mov	r14, r17
     4c8:	ff 24       	eor	r15, r15
     4ca:	e2 2a       	or	r14, r18
     4cc:	f3 2a       	or	r15, r19
     4ce:	f0 92 22 01 	sts	0x0122, r15
     4d2:	e0 92 21 01 	sts	0x0121, r14
     4d6:	8a e3       	ldi	r24, 0x3A	; 58
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     4de:	c8 2e       	mov	r12, r24
     4e0:	8a e3       	ldi	r24, 0x3A	; 58
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     4e8:	d8 2e       	mov	r13, r24
     4ea:	8a e3       	ldi	r24, 0x3A	; 58
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     4f2:	08 2f       	mov	r16, r24
     4f4:	10 e0       	ldi	r17, 0x00	; 0
     4f6:	8a e3       	ldi	r24, 0x3A	; 58
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 61 00 	call	0xc2	; 0xc2 <enc28j60ReadOp>
     4fe:	38 2f       	mov	r19, r24
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	20 2b       	or	r18, r16
     504:	31 2b       	or	r19, r17
     506:	27 fd       	sbrc	r18, 7
     508:	03 c0       	rjmp	.+6      	; 0x510 <enc28j60PacketReceive+0xaa>
     50a:	c0 e0       	ldi	r28, 0x00	; 0
     50c:	d0 e0       	ldi	r29, 0x00	; 0
     50e:	11 c0       	rjmp	.+34     	; 0x532 <enc28j60PacketReceive+0xcc>
     510:	cc 2d       	mov	r28, r12
     512:	d0 e0       	ldi	r29, 0x00	; 0
     514:	9d 2d       	mov	r25, r13
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	c8 2b       	or	r28, r24
     51a:	d9 2b       	or	r29, r25
     51c:	c5 01       	movw	r24, r10
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	24 97       	sbiw	r28, 0x04	; 4
     522:	8c 17       	cp	r24, r28
     524:	9d 07       	cpc	r25, r29
     526:	08 f4       	brcc	.+2      	; 0x52a <enc28j60PacketReceive+0xc4>
     528:	ec 01       	movw	r28, r24
     52a:	ce 01       	movw	r24, r28
     52c:	b4 01       	movw	r22, r8
     52e:	0e 94 83 00 	call	0x106	; 0x106 <enc28j60ReadBuffer>
     532:	8c e0       	ldi	r24, 0x0C	; 12
     534:	6e 2d       	mov	r22, r14
     536:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     53a:	6f 2d       	mov	r22, r15
     53c:	77 27       	eor	r23, r23
     53e:	67 fd       	sbrc	r22, 7
     540:	7a 95       	dec	r23
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     548:	87 01       	movw	r16, r14
     54a:	01 50       	subi	r16, 0x01	; 1
     54c:	10 40       	sbci	r17, 0x00	; 0
     54e:	80 e1       	ldi	r24, 0x10	; 16
     550:	00 30       	cpi	r16, 0x00	; 0
     552:	18 07       	cpc	r17, r24
     554:	38 f0       	brcs	.+14     	; 0x564 <enc28j60PacketReceive+0xfe>
     556:	8c e0       	ldi	r24, 0x0C	; 12
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     55e:	8d e0       	ldi	r24, 0x0D	; 13
     560:	6f e0       	ldi	r22, 0x0F	; 15
     562:	0a c0       	rjmp	.+20     	; 0x578 <enc28j60PacketReceive+0x112>
     564:	6e 2d       	mov	r22, r14
     566:	61 50       	subi	r22, 0x01	; 1
     568:	8c e0       	ldi	r24, 0x0C	; 12
     56a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     56e:	61 2f       	mov	r22, r17
     570:	77 27       	eor	r23, r23
     572:	67 fd       	sbrc	r22, 7
     574:	7a 95       	dec	r23
     576:	8d e0       	ldi	r24, 0x0D	; 13
     578:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <enc28j60Write>
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	6e e1       	ldi	r22, 0x1E	; 30
     580:	40 e4       	ldi	r20, 0x40	; 64
     582:	0e 94 76 00 	call	0xec	; 0xec <enc28j60WriteOp>
     586:	ce 01       	movw	r24, r28
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	bf 90       	pop	r11
     59a:	af 90       	pop	r10
     59c:	9f 90       	pop	r9
     59e:	8f 90       	pop	r8
     5a0:	08 95       	ret

000005a2 <checksum>:
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	6c 01       	movw	r12, r24
     5b4:	41 30       	cpi	r20, 0x01	; 1
     5b6:	81 f4       	brne	.+32     	; 0x5d8 <checksum+0x36>
     5b8:	68 50       	subi	r22, 0x08	; 8
     5ba:	70 40       	sbci	r23, 0x00	; 0
     5bc:	7b 01       	movw	r14, r22
     5be:	00 e0       	ldi	r16, 0x00	; 0
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	68 5f       	subi	r22, 0xF8	; 248
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	21 e1       	ldi	r18, 0x11	; 17
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	e2 0e       	add	r14, r18
     5d0:	f3 1e       	adc	r15, r19
     5d2:	04 1f       	adc	r16, r20
     5d4:	15 1f       	adc	r17, r21
     5d6:	15 c0       	rjmp	.+42     	; 0x602 <checksum+0x60>
     5d8:	42 30       	cpi	r20, 0x02	; 2
     5da:	21 f0       	breq	.+8      	; 0x5e4 <checksum+0x42>
     5dc:	ee 24       	eor	r14, r14
     5de:	ff 24       	eor	r15, r15
     5e0:	87 01       	movw	r16, r14
     5e2:	0f c0       	rjmp	.+30     	; 0x602 <checksum+0x60>
     5e4:	68 50       	subi	r22, 0x08	; 8
     5e6:	70 40       	sbci	r23, 0x00	; 0
     5e8:	7b 01       	movw	r14, r22
     5ea:	00 e0       	ldi	r16, 0x00	; 0
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	68 5f       	subi	r22, 0xF8	; 248
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	86 e0       	ldi	r24, 0x06	; 6
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e8 0e       	add	r14, r24
     5fc:	f9 1e       	adc	r15, r25
     5fe:	0a 1f       	adc	r16, r26
     600:	1b 1f       	adc	r17, r27
     602:	f6 01       	movw	r30, r12
     604:	eb 01       	movw	r28, r22
     606:	16 c0       	rjmp	.+44     	; 0x634 <checksum+0x92>
     608:	80 81       	ld	r24, Z
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 2f       	mov	r27, r26
     612:	a9 2f       	mov	r26, r25
     614:	98 2f       	mov	r25, r24
     616:	88 27       	eor	r24, r24
     618:	21 81       	ldd	r18, Z+1	; 0x01
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	82 2b       	or	r24, r18
     622:	93 2b       	or	r25, r19
     624:	a4 2b       	or	r26, r20
     626:	b5 2b       	or	r27, r21
     628:	e8 0e       	add	r14, r24
     62a:	f9 1e       	adc	r15, r25
     62c:	0a 1f       	adc	r16, r26
     62e:	1b 1f       	adc	r17, r27
     630:	32 96       	adiw	r30, 0x02	; 2
     632:	22 97       	sbiw	r28, 0x02	; 2
     634:	c2 30       	cpi	r28, 0x02	; 2
     636:	d1 05       	cpc	r29, r1
     638:	38 f7       	brcc	.-50     	; 0x608 <checksum+0x66>
     63a:	fb 01       	movw	r30, r22
     63c:	ee 7f       	andi	r30, 0xFE	; 254
     63e:	ec 0d       	add	r30, r12
     640:	fd 1d       	adc	r31, r13
     642:	60 ff       	sbrs	r22, 0
     644:	15 c0       	rjmp	.+42     	; 0x670 <checksum+0xce>
     646:	80 81       	ld	r24, Z
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	a0 e0       	ldi	r26, 0x00	; 0
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	ba 2f       	mov	r27, r26
     650:	a9 2f       	mov	r26, r25
     652:	98 2f       	mov	r25, r24
     654:	88 27       	eor	r24, r24
     656:	08 c0       	rjmp	.+16     	; 0x668 <checksum+0xc6>
     658:	2f ef       	ldi	r18, 0xFF	; 255
     65a:	3f ef       	ldi	r19, 0xFF	; 255
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	e2 22       	and	r14, r18
     662:	f3 22       	and	r15, r19
     664:	04 23       	and	r16, r20
     666:	15 23       	and	r17, r21
     668:	e8 0e       	add	r14, r24
     66a:	f9 1e       	adc	r15, r25
     66c:	0a 1f       	adc	r16, r26
     66e:	1b 1f       	adc	r17, r27
     670:	c8 01       	movw	r24, r16
     672:	aa 27       	eor	r26, r26
     674:	bb 27       	eor	r27, r27
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	a1 05       	cpc	r26, r1
     67a:	b1 05       	cpc	r27, r1
     67c:	69 f7       	brne	.-38     	; 0x658 <checksum+0xb6>
     67e:	97 01       	movw	r18, r14
     680:	20 95       	com	r18
     682:	30 95       	com	r19
     684:	c9 01       	movw	r24, r18
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	08 95       	ret

00000698 <init_ip_arp_udp_tcp>:
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	50 93 23 01 	sts	0x0123, r21
     6a2:	40 93 00 01 	sts	0x0100, r20
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	f9 01       	movw	r30, r18
     6ac:	e2 5d       	subi	r30, 0xD2	; 210
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	db 01       	movw	r26, r22
     6b2:	a2 0f       	add	r26, r18
     6b4:	b3 1f       	adc	r27, r19
     6b6:	8c 91       	ld	r24, X
     6b8:	80 83       	st	Z, r24
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	24 30       	cpi	r18, 0x04	; 4
     6c0:	31 05       	cpc	r19, r1
     6c2:	99 f7       	brne	.-26     	; 0x6aa <init_ip_arp_udp_tcp+0x12>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	f9 01       	movw	r30, r18
     6ca:	e8 5d       	subi	r30, 0xD8	; 216
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	de 01       	movw	r26, r28
     6d0:	a2 0f       	add	r26, r18
     6d2:	b3 1f       	adc	r27, r19
     6d4:	8c 91       	ld	r24, X
     6d6:	80 83       	st	Z, r24
     6d8:	2f 5f       	subi	r18, 0xFF	; 255
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	26 30       	cpi	r18, 0x06	; 6
     6de:	31 05       	cpc	r19, r1
     6e0:	99 f7       	brne	.-26     	; 0x6c8 <init_ip_arp_udp_tcp+0x30>
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <check_ip_message_is_from>:
     6e8:	dc 01       	movw	r26, r24
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	fb 01       	movw	r30, r22
     6f0:	e2 0f       	add	r30, r18
     6f2:	f3 1f       	adc	r31, r19
     6f4:	5a 96       	adiw	r26, 0x1a	; 26
     6f6:	9c 91       	ld	r25, X
     6f8:	5a 97       	sbiw	r26, 0x1a	; 26
     6fa:	80 81       	ld	r24, Z
     6fc:	98 17       	cp	r25, r24
     6fe:	11 f0       	breq	.+4      	; 0x704 <check_ip_message_is_from+0x1c>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	08 95       	ret
     704:	2f 5f       	subi	r18, 0xFF	; 255
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	11 96       	adiw	r26, 0x01	; 1
     70a:	24 30       	cpi	r18, 0x04	; 4
     70c:	31 05       	cpc	r19, r1
     70e:	79 f7       	brne	.-34     	; 0x6ee <check_ip_message_is_from+0x6>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	08 95       	ret

00000714 <eth_type_is_arp_and_my_ip>:
     714:	fc 01       	movw	r30, r24
     716:	69 32       	cpi	r22, 0x29	; 41
     718:	71 05       	cpc	r23, r1
     71a:	b0 f0       	brcs	.+44     	; 0x748 <eth_type_is_arp_and_my_ip+0x34>
     71c:	84 85       	ldd	r24, Z+12	; 0x0c
     71e:	88 30       	cpi	r24, 0x08	; 8
     720:	99 f4       	brne	.+38     	; 0x748 <eth_type_is_arp_and_my_ip+0x34>
     722:	85 85       	ldd	r24, Z+13	; 0x0d
     724:	86 30       	cpi	r24, 0x06	; 6
     726:	81 f4       	brne	.+32     	; 0x748 <eth_type_is_arp_and_my_ip+0x34>
     728:	df 01       	movw	r26, r30
     72a:	96 96       	adiw	r26, 0x26	; 38
     72c:	ee e2       	ldi	r30, 0x2E	; 46
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	9c 91       	ld	r25, X
     732:	80 81       	ld	r24, Z
     734:	98 17       	cp	r25, r24
     736:	41 f4       	brne	.+16     	; 0x748 <eth_type_is_arp_and_my_ip+0x34>
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	e2 33       	cpi	r30, 0x32	; 50
     740:	f8 07       	cpc	r31, r24
     742:	b1 f7       	brne	.-20     	; 0x730 <eth_type_is_arp_and_my_ip+0x1c>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	08 95       	ret
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret

0000074c <eth_type_is_ip_and_my_ip>:
     74c:	fc 01       	movw	r30, r24
     74e:	6a 32       	cpi	r22, 0x2A	; 42
     750:	71 05       	cpc	r23, r1
     752:	d0 f0       	brcs	.+52     	; 0x788 <eth_type_is_ip_and_my_ip+0x3c>
     754:	84 85       	ldd	r24, Z+12	; 0x0c
     756:	88 30       	cpi	r24, 0x08	; 8
     758:	b9 f4       	brne	.+46     	; 0x788 <eth_type_is_ip_and_my_ip+0x3c>
     75a:	85 85       	ldd	r24, Z+13	; 0x0d
     75c:	88 23       	and	r24, r24
     75e:	a1 f4       	brne	.+40     	; 0x788 <eth_type_is_ip_and_my_ip+0x3c>
     760:	86 85       	ldd	r24, Z+14	; 0x0e
     762:	85 34       	cpi	r24, 0x45	; 69
     764:	89 f4       	brne	.+34     	; 0x788 <eth_type_is_ip_and_my_ip+0x3c>
     766:	df 01       	movw	r26, r30
     768:	ee e2       	ldi	r30, 0x2E	; 46
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	5e 96       	adiw	r26, 0x1e	; 30
     76e:	9c 91       	ld	r25, X
     770:	5e 97       	sbiw	r26, 0x1e	; 30
     772:	80 81       	ld	r24, Z
     774:	98 17       	cp	r25, r24
     776:	41 f4       	brne	.+16     	; 0x788 <eth_type_is_ip_and_my_ip+0x3c>
     778:	11 96       	adiw	r26, 0x01	; 1
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	e2 33       	cpi	r30, 0x32	; 50
     780:	f8 07       	cpc	r31, r24
     782:	a1 f7       	brne	.-24     	; 0x76c <eth_type_is_ip_and_my_ip+0x20>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	08 95       	ret

0000078c <make_eth>:
     78c:	fc 01       	movw	r30, r24
     78e:	a8 e2       	ldi	r26, 0x28	; 40
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	86 81       	ldd	r24, Z+6	; 0x06
     794:	80 83       	st	Z, r24
     796:	8d 91       	ld	r24, X+
     798:	86 83       	std	Z+6, r24	; 0x06
     79a:	31 96       	adiw	r30, 0x01	; 1
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	ae 32       	cpi	r26, 0x2E	; 46
     7a0:	b8 07       	cpc	r27, r24
     7a2:	b9 f7       	brne	.-18     	; 0x792 <make_eth+0x6>
     7a4:	08 95       	ret

000007a6 <fill_ip_hdr_checksum>:
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	8c 01       	movw	r16, r24
     7ac:	fc 01       	movw	r30, r24
     7ae:	10 8e       	std	Z+24, r1	; 0x18
     7b0:	11 8e       	std	Z+25, r1	; 0x19
     7b2:	80 e4       	ldi	r24, 0x40	; 64
     7b4:	84 8b       	std	Z+20, r24	; 0x14
     7b6:	15 8a       	std	Z+21, r1	; 0x15
     7b8:	86 8b       	std	Z+22, r24	; 0x16
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 96       	adiw	r24, 0x0e	; 14
     7be:	64 e1       	ldi	r22, 0x14	; 20
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <checksum>
     7c8:	f8 01       	movw	r30, r16
     7ca:	90 8f       	std	Z+24, r25	; 0x18
     7cc:	81 8f       	std	Z+25, r24	; 0x19
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <make_ip>:
     7d4:	ac 01       	movw	r20, r24
     7d6:	fc 01       	movw	r30, r24
     7d8:	ae e2       	ldi	r26, 0x2E	; 46
     7da:	b1 e0       	ldi	r27, 0x01	; 1
     7dc:	82 8d       	ldd	r24, Z+26	; 0x1a
     7de:	86 8f       	std	Z+30, r24	; 0x1e
     7e0:	8d 91       	ld	r24, X+
     7e2:	82 8f       	std	Z+26, r24	; 0x1a
     7e4:	31 96       	adiw	r30, 0x01	; 1
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	a2 33       	cpi	r26, 0x32	; 50
     7ea:	b8 07       	cpc	r27, r24
     7ec:	b9 f7       	brne	.-18     	; 0x7dc <make_ip+0x8>
     7ee:	ca 01       	movw	r24, r20
     7f0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <fill_ip_hdr_checksum>
     7f4:	08 95       	ret

000007f6 <step_seq>:
     7f6:	fc 01       	movw	r30, r24
     7f8:	b9 96       	adiw	r30, 0x29	; 41
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	80 81       	ld	r24, Z
     7fe:	68 0f       	add	r22, r24
     800:	71 1d       	adc	r23, r1
     802:	84 81       	ldd	r24, Z+4	; 0x04
     804:	64 83       	std	Z+4, r22	; 0x04
     806:	44 23       	and	r20, r20
     808:	11 f0       	breq	.+4      	; 0x80e <step_seq+0x18>
     80a:	80 83       	st	Z, r24
     80c:	01 c0       	rjmp	.+2      	; 0x810 <step_seq+0x1a>
     80e:	10 82       	st	Z, r1
     810:	91 50       	subi	r25, 0x01	; 1
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	99 23       	and	r25, r25
     816:	19 f0       	breq	.+6      	; 0x81e <step_seq+0x28>
     818:	67 2f       	mov	r22, r23
     81a:	77 27       	eor	r23, r23
     81c:	ef cf       	rjmp	.-34     	; 0x7fc <step_seq+0x6>
     81e:	08 95       	ret

00000820 <make_tcphead>:
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	8c 01       	movw	r16, r24
     826:	fc 01       	movw	r30, r24
     828:	94 a1       	ldd	r25, Z+36	; 0x24
     82a:	82 a1       	ldd	r24, Z+34	; 0x22
     82c:	84 a3       	std	Z+36, r24	; 0x24
     82e:	92 a3       	std	Z+34, r25	; 0x22
     830:	95 a1       	ldd	r25, Z+37	; 0x25
     832:	83 a1       	ldd	r24, Z+35	; 0x23
     834:	85 a3       	std	Z+37, r24	; 0x25
     836:	93 a3       	std	Z+35, r25	; 0x23
     838:	c8 01       	movw	r24, r16
     83a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <step_seq>
     83e:	f8 01       	movw	r30, r16
     840:	12 aa       	std	Z+50, r1	; 0x32
     842:	13 aa       	std	Z+51, r1	; 0x33
     844:	80 e5       	ldi	r24, 0x50	; 80
     846:	86 a7       	std	Z+46, r24	; 0x2e
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <get_tcp_data_len>:
     84e:	fc 01       	movw	r30, r24
     850:	90 89       	ldd	r25, Z+16	; 0x10
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	21 89       	ldd	r18, Z+17	; 0x11
     856:	42 2f       	mov	r20, r18
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	48 2b       	or	r20, r24
     85c:	59 2b       	or	r21, r25
     85e:	26 a5       	ldd	r18, Z+46	; 0x2e
     860:	82 2f       	mov	r24, r18
     862:	82 95       	swap	r24
     864:	8f 70       	andi	r24, 0x0F	; 15
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	48 1b       	sub	r20, r24
     872:	59 0b       	sbc	r21, r25
     874:	44 51       	subi	r20, 0x14	; 20
     876:	50 40       	sbci	r21, 0x00	; 0
     878:	57 ff       	sbrs	r21, 7
     87a:	02 c0       	rjmp	.+4      	; 0x880 <get_tcp_data_len+0x32>
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	ca 01       	movw	r24, r20
     882:	08 95       	ret

00000884 <fill_tcp_data_p>:
     884:	6a 5c       	subi	r22, 0xCA	; 202
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	dc 01       	movw	r26, r24
     88a:	a6 0f       	add	r26, r22
     88c:	b7 1f       	adc	r27, r23
     88e:	66 53       	subi	r22, 0x36	; 54
     890:	70 40       	sbci	r23, 0x00	; 0
     892:	03 c0       	rjmp	.+6      	; 0x89a <fill_tcp_data_p+0x16>
     894:	8d 93       	st	X+, r24
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	fa 01       	movw	r30, r20
     89c:	4f 5f       	subi	r20, 0xFF	; 255
     89e:	5f 4f       	sbci	r21, 0xFF	; 255
     8a0:	84 91       	lpm	r24, Z+
     8a2:	88 23       	and	r24, r24
     8a4:	b9 f7       	brne	.-18     	; 0x894 <fill_tcp_data_p+0x10>
     8a6:	cb 01       	movw	r24, r22
     8a8:	08 95       	ret

000008aa <fill_tcp_data_len>:
     8aa:	da 01       	movw	r26, r20
     8ac:	6a 5c       	subi	r22, 0xCA	; 202
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	fc 01       	movw	r30, r24
     8b2:	e6 0f       	add	r30, r22
     8b4:	f7 1f       	adc	r31, r23
     8b6:	66 53       	subi	r22, 0x36	; 54
     8b8:	70 40       	sbci	r23, 0x00	; 0
     8ba:	92 2f       	mov	r25, r18
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <fill_tcp_data_len+0x1a>
     8be:	8d 91       	ld	r24, X+
     8c0:	81 93       	st	Z+, r24
     8c2:	91 50       	subi	r25, 0x01	; 1
     8c4:	99 23       	and	r25, r25
     8c6:	d9 f7       	brne	.-10     	; 0x8be <fill_tcp_data_len+0x14>
     8c8:	cb 01       	movw	r24, r22
     8ca:	82 0f       	add	r24, r18
     8cc:	91 1d       	adc	r25, r1
     8ce:	08 95       	ret

000008d0 <register_ping_rec_callback>:
     8d0:	90 93 27 01 	sts	0x0127, r25
     8d4:	80 93 26 01 	sts	0x0126, r24
     8d8:	08 95       	ret

000008da <make_tcp_ack_with_data_noflags>:
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	8c 01       	movw	r16, r24
     8e4:	7b 01       	movw	r14, r22
     8e6:	cb 01       	movw	r24, r22
     8e8:	88 96       	adiw	r24, 0x28	; 40
     8ea:	f8 01       	movw	r30, r16
     8ec:	90 8b       	std	Z+16, r25	; 0x10
     8ee:	81 8b       	std	Z+17, r24	; 0x11
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <fill_ip_hdr_checksum>
     8f6:	f8 01       	movw	r30, r16
     8f8:	12 aa       	std	Z+50, r1	; 0x32
     8fa:	13 aa       	std	Z+51, r1	; 0x33
     8fc:	8c e1       	ldi	r24, 0x1C	; 28
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	e8 0e       	add	r14, r24
     902:	f9 1e       	adc	r15, r25
     904:	c8 01       	movw	r24, r16
     906:	4a 96       	adiw	r24, 0x1a	; 26
     908:	b7 01       	movw	r22, r14
     90a:	42 e0       	ldi	r20, 0x02	; 2
     90c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <checksum>
     910:	f8 01       	movw	r30, r16
     912:	92 ab       	std	Z+50, r25	; 0x32
     914:	83 ab       	std	Z+51, r24	; 0x33
     916:	c7 01       	movw	r24, r14
     918:	4a 96       	adiw	r24, 0x1a	; 26
     91a:	b8 01       	movw	r22, r16
     91c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enc28j60PacketSend>
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <make_tcp_ack_from_any>:
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	ec 01       	movw	r28, r24
     936:	7b 01       	movw	r14, r22
     938:	14 2f       	mov	r17, r20
     93a:	0e 94 c6 03 	call	0x78c	; 0x78c <make_eth>
     93e:	81 2f       	mov	r24, r17
     940:	80 61       	ori	r24, 0x10	; 16
     942:	8f a7       	std	Y+47, r24	; 0x2f
     944:	14 30       	cpi	r17, 0x04	; 4
     946:	31 f0       	breq	.+12     	; 0x954 <make_tcp_ack_from_any+0x2a>
     948:	e1 14       	cp	r14, r1
     94a:	f1 04       	cpc	r15, r1
     94c:	19 f4       	brne	.+6      	; 0x954 <make_tcp_ack_from_any+0x2a>
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	e7 2e       	mov	r14, r23
     952:	f1 2c       	mov	r15, r1
     954:	ce 01       	movw	r24, r28
     956:	b7 01       	movw	r22, r14
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	0e 94 10 04 	call	0x820	; 0x820 <make_tcphead>
     95e:	18 8a       	std	Y+16, r1	; 0x10
     960:	88 e2       	ldi	r24, 0x28	; 40
     962:	89 8b       	std	Y+17, r24	; 0x11
     964:	ce 01       	movw	r24, r28
     966:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <make_ip>
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	88 ab       	std	Y+48, r24	; 0x30
     96e:	19 aa       	std	Y+49, r1	; 0x31
     970:	ce 01       	movw	r24, r28
     972:	4a 96       	adiw	r24, 0x1a	; 26
     974:	6c e1       	ldi	r22, 0x1C	; 28
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	42 e0       	ldi	r20, 0x02	; 2
     97a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <checksum>
     97e:	9a ab       	std	Y+50, r25	; 0x32
     980:	8b ab       	std	Y+51, r24	; 0x33
     982:	86 e3       	ldi	r24, 0x36	; 54
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	be 01       	movw	r22, r28
     988:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enc28j60PacketSend>
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <www_server_reply>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	8c 01       	movw	r16, r24
     9a2:	7b 01       	movw	r14, r22
     9a4:	60 91 24 01 	lds	r22, 0x0124
     9a8:	70 91 25 01 	lds	r23, 0x0125
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	0e 94 95 04 	call	0x92a	; 0x92a <make_tcp_ack_from_any>
     9b2:	89 e1       	ldi	r24, 0x19	; 25
     9b4:	f8 01       	movw	r30, r16
     9b6:	87 a7       	std	Z+47, r24	; 0x2f
     9b8:	c8 01       	movw	r24, r16
     9ba:	b7 01       	movw	r22, r14
     9bc:	0e 94 6d 04 	call	0x8da	; 0x8da <make_tcp_ack_with_data_noflags>
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	08 95       	ret

000009ca <make_tcp_synack_from_syn>:
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	8c 01       	movw	r16, r24
     9d0:	0e 94 c6 03 	call	0x78c	; 0x78c <make_eth>
     9d4:	f8 01       	movw	r30, r16
     9d6:	10 8a       	std	Z+16, r1	; 0x10
     9d8:	8c e2       	ldi	r24, 0x2C	; 44
     9da:	81 8b       	std	Z+17, r24	; 0x11
     9dc:	c8 01       	movw	r24, r16
     9de:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <make_ip>
     9e2:	82 e1       	ldi	r24, 0x12	; 18
     9e4:	f8 01       	movw	r30, r16
     9e6:	87 a7       	std	Z+47, r24	; 0x2f
     9e8:	c8 01       	movw	r24, r16
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	0e 94 10 04 	call	0x820	; 0x820 <make_tcphead>
     9f4:	f8 01       	movw	r30, r16
     9f6:	16 a2       	std	Z+38, r1	; 0x26
     9f8:	17 a2       	std	Z+39, r1	; 0x27
     9fa:	80 91 01 01 	lds	r24, 0x0101
     9fe:	80 a7       	std	Z+40, r24	; 0x28
     a00:	11 a6       	std	Z+41, r1	; 0x29
     a02:	8d 5f       	subi	r24, 0xFD	; 253
     a04:	80 93 01 01 	sts	0x0101, r24
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	86 ab       	std	Z+54, r24	; 0x36
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	87 ab       	std	Z+55, r24	; 0x37
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	90 af       	std	Z+56, r25	; 0x38
     a14:	11 ae       	std	Z+57, r1	; 0x39
     a16:	80 e6       	ldi	r24, 0x60	; 96
     a18:	86 a7       	std	Z+46, r24	; 0x2e
     a1a:	90 ab       	std	Z+48, r25	; 0x30
     a1c:	88 e7       	ldi	r24, 0x78	; 120
     a1e:	81 ab       	std	Z+49, r24	; 0x31
     a20:	c8 01       	movw	r24, r16
     a22:	4a 96       	adiw	r24, 0x1a	; 26
     a24:	60 e2       	ldi	r22, 0x20	; 32
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	42 e0       	ldi	r20, 0x02	; 2
     a2a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <checksum>
     a2e:	f8 01       	movw	r30, r16
     a30:	92 ab       	std	Z+50, r25	; 0x32
     a32:	83 ab       	std	Z+51, r24	; 0x33
     a34:	8a e3       	ldi	r24, 0x3A	; 58
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	b8 01       	movw	r22, r16
     a3a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enc28j60PacketSend>
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <make_udp_reply_from_request>:
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	ec 01       	movw	r28, r24
     a54:	7b 01       	movw	r14, r22
     a56:	14 2f       	mov	r17, r20
     a58:	d2 2e       	mov	r13, r18
     a5a:	03 2f       	mov	r16, r19
     a5c:	0e 94 c6 03 	call	0x78c	; 0x78c <make_eth>
     a60:	1d 3d       	cpi	r17, 0xDD	; 221
     a62:	08 f0       	brcs	.+2      	; 0xa66 <make_udp_reply_from_request+0x22>
     a64:	1c ed       	ldi	r17, 0xDC	; 220
     a66:	18 8a       	std	Y+16, r1	; 0x10
     a68:	14 5e       	subi	r17, 0xE4	; 228
     a6a:	19 8b       	std	Y+17, r17	; 0x11
     a6c:	ce 01       	movw	r24, r28
     a6e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <make_ip>
     a72:	8a a1       	ldd	r24, Y+34	; 0x22
     a74:	8c a3       	std	Y+36, r24	; 0x24
     a76:	8b a1       	ldd	r24, Y+35	; 0x23
     a78:	8d a3       	std	Y+37, r24	; 0x25
     a7a:	0a a3       	std	Y+34, r16	; 0x22
     a7c:	db a2       	std	Y+35, r13	; 0x23
     a7e:	1e a2       	std	Y+38, r1	; 0x26
     a80:	14 51       	subi	r17, 0x14	; 20
     a82:	1f a3       	std	Y+39, r17	; 0x27
     a84:	18 50       	subi	r17, 0x08	; 8
     a86:	18 a6       	std	Y+40, r1	; 0x28
     a88:	19 a6       	std	Y+41, r1	; 0x29
     a8a:	de 01       	movw	r26, r28
     a8c:	9a 96       	adiw	r26, 0x2a	; 42
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	07 c0       	rjmp	.+14     	; 0xaa2 <make_udp_reply_from_request+0x5e>
     a94:	f7 01       	movw	r30, r14
     a96:	e2 0f       	add	r30, r18
     a98:	f3 1f       	adc	r31, r19
     a9a:	80 81       	ld	r24, Z
     a9c:	8d 93       	st	X+, r24
     a9e:	2f 5f       	subi	r18, 0xFF	; 255
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	21 17       	cp	r18, r17
     aa4:	b8 f3       	brcs	.-18     	; 0xa94 <make_udp_reply_from_request+0x50>
     aa6:	01 2f       	mov	r16, r17
     aa8:	10 e0       	ldi	r17, 0x00	; 0
     aaa:	00 5f       	subi	r16, 0xF0	; 240
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	ce 01       	movw	r24, r28
     ab0:	4a 96       	adiw	r24, 0x1a	; 26
     ab2:	b8 01       	movw	r22, r16
     ab4:	41 e0       	ldi	r20, 0x01	; 1
     ab6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <checksum>
     aba:	98 a7       	std	Y+40, r25	; 0x28
     abc:	89 a7       	std	Y+41, r24	; 0x29
     abe:	c8 01       	movw	r24, r16
     ac0:	4a 96       	adiw	r24, 0x1a	; 26
     ac2:	be 01       	movw	r22, r28
     ac4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enc28j60PacketSend>
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	08 95       	ret

00000ad8 <make_echo_reply_from_request>:
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	8b 01       	movw	r16, r22
     ae4:	0e 94 c6 03 	call	0x78c	; 0x78c <make_eth>
     ae8:	ce 01       	movw	r24, r28
     aea:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <make_ip>
     aee:	1a a2       	std	Y+34, r1	; 0x22
     af0:	8c a1       	ldd	r24, Y+36	; 0x24
     af2:	88 3f       	cpi	r24, 0xF8	; 248
     af4:	18 f0       	brcs	.+6      	; 0xafc <make_echo_reply_from_request+0x24>
     af6:	8d a1       	ldd	r24, Y+37	; 0x25
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	8d a3       	std	Y+37, r24	; 0x25
     afc:	8c a1       	ldd	r24, Y+36	; 0x24
     afe:	88 5f       	subi	r24, 0xF8	; 248
     b00:	8c a3       	std	Y+36, r24	; 0x24
     b02:	c8 01       	movw	r24, r16
     b04:	be 01       	movw	r22, r28
     b06:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enc28j60PacketSend>
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <make_arp_answer_from_request>:
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24
     b1a:	0e 94 c6 03 	call	0x78c	; 0x78c <make_eth>
     b1e:	1c 8a       	std	Y+20, r1	; 0x14
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	8d 8b       	std	Y+21, r24	; 0x15
     b24:	fe 01       	movw	r30, r28
     b26:	a8 e2       	ldi	r26, 0x28	; 40
     b28:	b1 e0       	ldi	r27, 0x01	; 1
     b2a:	86 89       	ldd	r24, Z+22	; 0x16
     b2c:	80 a3       	std	Z+32, r24	; 0x20
     b2e:	8d 91       	ld	r24, X+
     b30:	86 8b       	std	Z+22, r24	; 0x16
     b32:	31 96       	adiw	r30, 0x01	; 1
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	ae 32       	cpi	r26, 0x2E	; 46
     b38:	b8 07       	cpc	r27, r24
     b3a:	b9 f7       	brne	.-18     	; 0xb2a <make_arp_answer_from_request+0x16>
     b3c:	fe 01       	movw	r30, r28
     b3e:	7c 96       	adiw	r30, 0x1c	; 28
     b40:	ae e2       	ldi	r26, 0x2E	; 46
     b42:	b1 e0       	ldi	r27, 0x01	; 1
     b44:	80 81       	ld	r24, Z
     b46:	82 87       	std	Z+10, r24	; 0x0a
     b48:	8d 91       	ld	r24, X+
     b4a:	81 93       	st	Z+, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	a2 33       	cpi	r26, 0x32	; 50
     b50:	b8 07       	cpc	r27, r24
     b52:	c1 f7       	brne	.-16     	; 0xb44 <make_arp_answer_from_request+0x30>
     b54:	8a e2       	ldi	r24, 0x2A	; 42
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	be 01       	movw	r22, r28
     b5a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enc28j60PacketSend>
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <packetloop_icmp_tcp>:
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ec 01       	movw	r28, r24
     b70:	8b 01       	movw	r16, r22
     b72:	0e 94 8a 03 	call	0x714	; 0x714 <eth_type_is_arp_and_my_ip>
     b76:	88 23       	and	r24, r24
     b78:	41 f0       	breq	.+16     	; 0xb8a <packetloop_icmp_tcp+0x26>
     b7a:	8d 89       	ldd	r24, Y+21	; 0x15
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <packetloop_icmp_tcp+0x1e>
     b80:	5a c0       	rjmp	.+180    	; 0xc36 <packetloop_icmp_tcp+0xd2>
     b82:	ce 01       	movw	r24, r28
     b84:	0e 94 8a 05 	call	0xb14	; 0xb14 <make_arp_answer_from_request>
     b88:	56 c0       	rjmp	.+172    	; 0xc36 <packetloop_icmp_tcp+0xd2>
     b8a:	ce 01       	movw	r24, r28
     b8c:	b8 01       	movw	r22, r16
     b8e:	0e 94 a6 03 	call	0x74c	; 0x74c <eth_type_is_ip_and_my_ip>
     b92:	88 23       	and	r24, r24
     b94:	09 f4       	brne	.+2      	; 0xb98 <packetloop_icmp_tcp+0x34>
     b96:	4f c0       	rjmp	.+158    	; 0xc36 <packetloop_icmp_tcp+0xd2>
     b98:	9f 89       	ldd	r25, Y+23	; 0x17
     b9a:	91 30       	cpi	r25, 0x01	; 1
     b9c:	89 f4       	brne	.+34     	; 0xbc0 <packetloop_icmp_tcp+0x5c>
     b9e:	8a a1       	ldd	r24, Y+34	; 0x22
     ba0:	88 30       	cpi	r24, 0x08	; 8
     ba2:	71 f4       	brne	.+28     	; 0xbc0 <packetloop_icmp_tcp+0x5c>
     ba4:	e0 91 26 01 	lds	r30, 0x0126
     ba8:	f0 91 27 01 	lds	r31, 0x0127
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	19 f0       	breq	.+6      	; 0xbb6 <packetloop_icmp_tcp+0x52>
     bb0:	ce 01       	movw	r24, r28
     bb2:	4a 96       	adiw	r24, 0x1a	; 26
     bb4:	09 95       	icall
     bb6:	ce 01       	movw	r24, r28
     bb8:	b8 01       	movw	r22, r16
     bba:	0e 94 6c 05 	call	0xad8	; 0xad8 <make_echo_reply_from_request>
     bbe:	3b c0       	rjmp	.+118    	; 0xc36 <packetloop_icmp_tcp+0xd2>
     bc0:	06 33       	cpi	r16, 0x36	; 54
     bc2:	11 05       	cpc	r17, r1
     bc4:	10 f4       	brcc	.+4      	; 0xbca <packetloop_icmp_tcp+0x66>
     bc6:	96 30       	cpi	r25, 0x06	; 6
     bc8:	b1 f5       	brne	.+108    	; 0xc36 <packetloop_icmp_tcp+0xd2>
     bca:	9c a1       	ldd	r25, Y+36	; 0x24
     bcc:	80 91 23 01 	lds	r24, 0x0123
     bd0:	98 17       	cp	r25, r24
     bd2:	89 f5       	brne	.+98     	; 0xc36 <packetloop_icmp_tcp+0xd2>
     bd4:	9d a1       	ldd	r25, Y+37	; 0x25
     bd6:	80 91 00 01 	lds	r24, 0x0100
     bda:	98 17       	cp	r25, r24
     bdc:	61 f5       	brne	.+88     	; 0xc36 <packetloop_icmp_tcp+0xd2>
     bde:	8f a5       	ldd	r24, Y+47	; 0x2f
     be0:	f8 2e       	mov	r15, r24
     be2:	81 ff       	sbrs	r24, 1
     be4:	04 c0       	rjmp	.+8      	; 0xbee <packetloop_icmp_tcp+0x8a>
     be6:	ce 01       	movw	r24, r28
     be8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <make_tcp_synack_from_syn>
     bec:	24 c0       	rjmp	.+72     	; 0xc36 <packetloop_icmp_tcp+0xd2>
     bee:	84 ff       	sbrs	r24, 4
     bf0:	22 c0       	rjmp	.+68     	; 0xc36 <packetloop_icmp_tcp+0xd2>
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 27 04 	call	0x84e	; 0x84e <get_tcp_data_len>
     bf8:	90 93 25 01 	sts	0x0125, r25
     bfc:	80 93 24 01 	sts	0x0124, r24
     c00:	89 2b       	or	r24, r25
     c02:	49 f4       	brne	.+18     	; 0xc16 <packetloop_icmp_tcp+0xb2>
     c04:	f0 fe       	sbrs	r15, 0
     c06:	17 c0       	rjmp	.+46     	; 0xc36 <packetloop_icmp_tcp+0xd2>
     c08:	ce 01       	movw	r24, r28
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	0e 94 95 04 	call	0x92a	; 0x92a <make_tcp_ack_from_any>
     c14:	10 c0       	rjmp	.+32     	; 0xc36 <packetloop_icmp_tcp+0xd2>
     c16:	8e a5       	ldd	r24, Y+46	; 0x2e
     c18:	82 95       	swap	r24
     c1a:	8f 70       	andi	r24, 0x0F	; 15
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	22 0f       	add	r18, r18
     c26:	33 1f       	adc	r19, r19
     c28:	2e 5d       	subi	r18, 0xDE	; 222
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	08 50       	subi	r16, 0x08	; 8
     c2e:	10 40       	sbci	r17, 0x00	; 0
     c30:	02 17       	cp	r16, r18
     c32:	13 07       	cpc	r17, r19
     c34:	10 f4       	brcc	.+4      	; 0xc3a <packetloop_icmp_tcp+0xd6>
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	c9 01       	movw	r24, r18
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	08 95       	ret

00000c48 <fill_tcp_data>:
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	da 01       	movw	r26, r20
     c4e:	0d 90       	ld	r0, X+
     c50:	00 20       	and	r0, r0
     c52:	e9 f7       	brne	.-6      	; 0xc4e <fill_tcp_data+0x6>
     c54:	11 97       	sbiw	r26, 0x01	; 1
     c56:	a4 1b       	sub	r26, r20
     c58:	6a 5c       	subi	r22, 0xCA	; 202
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	ec 01       	movw	r28, r24
     c5e:	c6 0f       	add	r28, r22
     c60:	d7 1f       	adc	r29, r23
     c62:	66 53       	subi	r22, 0x36	; 54
     c64:	70 40       	sbci	r23, 0x00	; 0
     c66:	fa 01       	movw	r30, r20
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	9a 01       	movw	r18, r20
     c6c:	2a 0f       	add	r18, r26
     c6e:	3b 1f       	adc	r19, r27
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <fill_tcp_data+0x2e>
     c72:	81 91       	ld	r24, Z+
     c74:	89 93       	st	Y+, r24
     c76:	e2 17       	cp	r30, r18
     c78:	f3 07       	cpc	r31, r19
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <fill_tcp_data+0x2a>
     c7c:	9b 01       	movw	r18, r22
     c7e:	2a 0f       	add	r18, r26
     c80:	3b 1f       	adc	r19, r27
     c82:	c9 01       	movw	r24, r18
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f e0       	ldi	r19, 0x0F	; 15
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <delay_ms+0xe>
     c90:	f9 01       	movw	r30, r18
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <delay_ms+0x8>
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	d1 f7       	brne	.-12     	; 0xc90 <delay_ms+0x6>
     c9c:	08 95       	ret

00000c9e <wd_init>:
     c9e:	2f e0       	ldi	r18, 0x0F	; 15
     ca0:	88 e1       	ldi	r24, 0x18	; 24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	a8 95       	wdr
     caa:	80 93 60 00 	sts	0x0060, r24
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	20 93 60 00 	sts	0x0060, r18
     cb4:	08 95       	ret

00000cb6 <wd_kick>:
     cb6:	a8 95       	wdr
     cb8:	08 95       	ret

00000cba <zloz_pakiet>:
		led=1;
		}
	}
}

uint16_t zloz_pakiet(uint8_t* stan){
     cba:	fc 01       	movw	r30, r24
dane[0]=0x3C;
     cbc:	8c e3       	ldi	r24, 0x3C	; 60
     cbe:	80 93 f8 06 	sts	0x06F8, r24
dane[1]=0x49;
     cc2:	89 e4       	ldi	r24, 0x49	; 73
     cc4:	80 93 f9 06 	sts	0x06F9, r24
dane[2]=0x3E;
     cc8:	8e e3       	ldi	r24, 0x3E	; 62
     cca:	80 93 fa 06 	sts	0x06FA, r24
//strcpy(dane,"<I>");
/////////////////////////////////////////
if (stan[1]==0x00)	dane[3]|=0x01;
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	88 23       	and	r24, r24
     cd2:	21 f4       	brne	.+8      	; 0xcdc <zloz_pakiet+0x22>
     cd4:	80 91 fb 06 	lds	r24, 0x06FB
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <zloz_pakiet+0x28>
else				dane[3]&=~(0x01); 
     cdc:	80 91 fb 06 	lds	r24, 0x06FB
     ce0:	8e 7f       	andi	r24, 0xFE	; 254
     ce2:	80 93 fb 06 	sts	0x06FB, r24
if (stan[2]==0x00)	dane[3]|=0x02;
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	88 23       	and	r24, r24
     cea:	21 f4       	brne	.+8      	; 0xcf4 <zloz_pakiet+0x3a>
     cec:	80 91 fb 06 	lds	r24, 0x06FB
     cf0:	82 60       	ori	r24, 0x02	; 2
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <zloz_pakiet+0x40>
else				dane[3]&=~(0x02); 
     cf4:	80 91 fb 06 	lds	r24, 0x06FB
     cf8:	8d 7f       	andi	r24, 0xFD	; 253
     cfa:	80 93 fb 06 	sts	0x06FB, r24
if (stan[3]==0x00)	dane[3]|=0x04;
     cfe:	83 81       	ldd	r24, Z+3	; 0x03
     d00:	88 23       	and	r24, r24
     d02:	21 f4       	brne	.+8      	; 0xd0c <zloz_pakiet+0x52>
     d04:	80 91 fb 06 	lds	r24, 0x06FB
     d08:	84 60       	ori	r24, 0x04	; 4
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <zloz_pakiet+0x58>
else				dane[3]&=~(0x04); 
     d0c:	80 91 fb 06 	lds	r24, 0x06FB
     d10:	8b 7f       	andi	r24, 0xFB	; 251
     d12:	80 93 fb 06 	sts	0x06FB, r24
if (stan[4]==0x00)	dane[3]|=0x08;
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	88 23       	and	r24, r24
     d1a:	21 f4       	brne	.+8      	; 0xd24 <zloz_pakiet+0x6a>
     d1c:	80 91 fb 06 	lds	r24, 0x06FB
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <zloz_pakiet+0x70>
else				dane[3]&=~(0x08); 
     d24:	80 91 fb 06 	lds	r24, 0x06FB
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	80 93 fb 06 	sts	0x06FB, r24
if (stan[5]==0x00)	dane[3]|=0x10;
     d2e:	85 81       	ldd	r24, Z+5	; 0x05
     d30:	88 23       	and	r24, r24
     d32:	21 f4       	brne	.+8      	; 0xd3c <zloz_pakiet+0x82>
     d34:	80 91 fb 06 	lds	r24, 0x06FB
     d38:	80 61       	ori	r24, 0x10	; 16
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <zloz_pakiet+0x88>
else				dane[3]&=~(0x10);
     d3c:	80 91 fb 06 	lds	r24, 0x06FB
     d40:	8f 7e       	andi	r24, 0xEF	; 239
     d42:	80 93 fb 06 	sts	0x06FB, r24
if (stan[6]==0x00)	dane[3]|=0x20;
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	88 23       	and	r24, r24
     d4a:	21 f4       	brne	.+8      	; 0xd54 <zloz_pakiet+0x9a>
     d4c:	80 91 fb 06 	lds	r24, 0x06FB
     d50:	80 62       	ori	r24, 0x20	; 32
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <zloz_pakiet+0xa0>
else				dane[3]&=~(0x20);
     d54:	80 91 fb 06 	lds	r24, 0x06FB
     d58:	8f 7d       	andi	r24, 0xDF	; 223
     d5a:	80 93 fb 06 	sts	0x06FB, r24
if (stan[7]==0x00)	dane[3]|=0x40;
     d5e:	87 81       	ldd	r24, Z+7	; 0x07
     d60:	88 23       	and	r24, r24
     d62:	21 f4       	brne	.+8      	; 0xd6c <zloz_pakiet+0xb2>
     d64:	80 91 fb 06 	lds	r24, 0x06FB
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <zloz_pakiet+0xb8>
else				dane[3]&=~(0x40);
     d6c:	80 91 fb 06 	lds	r24, 0x06FB
     d70:	8f 7b       	andi	r24, 0xBF	; 191
     d72:	80 93 fb 06 	sts	0x06FB, r24
if (stan[8]==0x00)	dane[3]|=0x80;
     d76:	80 85       	ldd	r24, Z+8	; 0x08
     d78:	88 23       	and	r24, r24
     d7a:	21 f4       	brne	.+8      	; 0xd84 <zloz_pakiet+0xca>
     d7c:	80 91 fb 06 	lds	r24, 0x06FB
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <zloz_pakiet+0xd0>
else				dane[3]&=~(0x80);
     d84:	80 91 fb 06 	lds	r24, 0x06FB
     d88:	8f 77       	andi	r24, 0x7F	; 127
     d8a:	80 93 fb 06 	sts	0x06FB, r24
if (stan[9]==0x00)	dane[4]|=0x01;
     d8e:	81 85       	ldd	r24, Z+9	; 0x09
     d90:	88 23       	and	r24, r24
     d92:	21 f4       	brne	.+8      	; 0xd9c <zloz_pakiet+0xe2>
     d94:	80 91 fc 06 	lds	r24, 0x06FC
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <zloz_pakiet+0xe8>
else				dane[4]&=~(0x01); 
     d9c:	80 91 fc 06 	lds	r24, 0x06FC
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	80 93 fc 06 	sts	0x06FC, r24
if (stan[10]==0x00)	dane[4]|=0x02;
     da6:	82 85       	ldd	r24, Z+10	; 0x0a
     da8:	88 23       	and	r24, r24
     daa:	21 f4       	brne	.+8      	; 0xdb4 <zloz_pakiet+0xfa>
     dac:	80 91 fc 06 	lds	r24, 0x06FC
     db0:	82 60       	ori	r24, 0x02	; 2
     db2:	03 c0       	rjmp	.+6      	; 0xdba <zloz_pakiet+0x100>
else					dane[4]&=~(0x02); 
     db4:	80 91 fc 06 	lds	r24, 0x06FC
     db8:	8d 7f       	andi	r24, 0xFD	; 253
     dba:	80 93 fc 06 	sts	0x06FC, r24
if (stan[11]==0x00)	dane[4]|=0x04;
     dbe:	83 85       	ldd	r24, Z+11	; 0x0b
     dc0:	88 23       	and	r24, r24
     dc2:	21 f4       	brne	.+8      	; 0xdcc <zloz_pakiet+0x112>
     dc4:	80 91 fc 06 	lds	r24, 0x06FC
     dc8:	84 60       	ori	r24, 0x04	; 4
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <zloz_pakiet+0x118>
else					dane[4]&=~(0x04); 
     dcc:	80 91 fc 06 	lds	r24, 0x06FC
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	80 93 fc 06 	sts	0x06FC, r24
if (stan[12]==0x00)	dane[4]|=0x08;
     dd6:	84 85       	ldd	r24, Z+12	; 0x0c
     dd8:	88 23       	and	r24, r24
     dda:	21 f4       	brne	.+8      	; 0xde4 <zloz_pakiet+0x12a>
     ddc:	80 91 fc 06 	lds	r24, 0x06FC
     de0:	88 60       	ori	r24, 0x08	; 8
     de2:	03 c0       	rjmp	.+6      	; 0xdea <zloz_pakiet+0x130>
else					dane[4]&=~(0x08); 
     de4:	80 91 fc 06 	lds	r24, 0x06FC
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	80 93 fc 06 	sts	0x06FC, r24
if (stan[13]==0x00)	dane[4]|=0x10;
     dee:	85 85       	ldd	r24, Z+13	; 0x0d
     df0:	88 23       	and	r24, r24
     df2:	21 f4       	brne	.+8      	; 0xdfc <zloz_pakiet+0x142>
     df4:	80 91 fc 06 	lds	r24, 0x06FC
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <zloz_pakiet+0x148>
else					dane[4]&=~(0x10);
     dfc:	80 91 fc 06 	lds	r24, 0x06FC
     e00:	8f 7e       	andi	r24, 0xEF	; 239
     e02:	80 93 fc 06 	sts	0x06FC, r24
if (stan[14]==0x01)	dane[4]|=0x20;
     e06:	86 85       	ldd	r24, Z+14	; 0x0e
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	21 f4       	brne	.+8      	; 0xe14 <zloz_pakiet+0x15a>
     e0c:	80 91 fc 06 	lds	r24, 0x06FC
     e10:	80 62       	ori	r24, 0x20	; 32
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <zloz_pakiet+0x160>
else					dane[4]&=~(0x20);
     e14:	80 91 fc 06 	lds	r24, 0x06FC
     e18:	8f 7d       	andi	r24, 0xDF	; 223
     e1a:	80 93 fc 06 	sts	0x06FC, r24
if (stan[15]==0x01)	dane[4]|=0x40;
     e1e:	87 85       	ldd	r24, Z+15	; 0x0f
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	21 f4       	brne	.+8      	; 0xe2c <zloz_pakiet+0x172>
     e24:	80 91 fc 06 	lds	r24, 0x06FC
     e28:	80 64       	ori	r24, 0x40	; 64
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <zloz_pakiet+0x178>
else					dane[4]&=~(0x40);
     e2c:	80 91 fc 06 	lds	r24, 0x06FC
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	80 93 fc 06 	sts	0x06FC, r24
if (stan[16]==0x01)	dane[4]|=0x80;
     e36:	80 89       	ldd	r24, Z+16	; 0x10
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	21 f4       	brne	.+8      	; 0xe44 <zloz_pakiet+0x18a>
     e3c:	80 91 fc 06 	lds	r24, 0x06FC
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <zloz_pakiet+0x190>
else					dane[4]&=~(0x80);
     e44:	80 91 fc 06 	lds	r24, 0x06FC
     e48:	8f 77       	andi	r24, 0x7F	; 127
     e4a:	80 93 fc 06 	sts	0x06FC, r24
if (stan[17]==0x01)	dane[5]|=0x01;
     e4e:	81 89       	ldd	r24, Z+17	; 0x11
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	21 f4       	brne	.+8      	; 0xe5c <zloz_pakiet+0x1a2>
     e54:	80 91 fd 06 	lds	r24, 0x06FD
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <zloz_pakiet+0x1a8>
else					dane[5]&=~(0x01); 
     e5c:	80 91 fd 06 	lds	r24, 0x06FD
     e60:	8e 7f       	andi	r24, 0xFE	; 254
     e62:	80 93 fd 06 	sts	0x06FD, r24
if (stan[18]==0x01)	dane[5]|=0x02;
     e66:	82 89       	ldd	r24, Z+18	; 0x12
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	21 f4       	brne	.+8      	; 0xe74 <zloz_pakiet+0x1ba>
     e6c:	80 91 fd 06 	lds	r24, 0x06FD
     e70:	82 60       	ori	r24, 0x02	; 2
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <zloz_pakiet+0x1c0>
else					dane[5]&=~(0x02); 
     e74:	80 91 fd 06 	lds	r24, 0x06FD
     e78:	8d 7f       	andi	r24, 0xFD	; 253
     e7a:	80 93 fd 06 	sts	0x06FD, r24
if (stan[19]==0x01)	dane[5]|=0x04;
     e7e:	83 89       	ldd	r24, Z+19	; 0x13
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	21 f4       	brne	.+8      	; 0xe8c <zloz_pakiet+0x1d2>
     e84:	80 91 fd 06 	lds	r24, 0x06FD
     e88:	84 60       	ori	r24, 0x04	; 4
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <zloz_pakiet+0x1d8>
else					dane[5]&=~(0x04); 
     e8c:	80 91 fd 06 	lds	r24, 0x06FD
     e90:	8b 7f       	andi	r24, 0xFB	; 251
     e92:	80 93 fd 06 	sts	0x06FD, r24
if (stan[20]==0x01)	dane[5]|=0x08;
     e96:	84 89       	ldd	r24, Z+20	; 0x14
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	21 f4       	brne	.+8      	; 0xea4 <zloz_pakiet+0x1ea>
     e9c:	80 91 fd 06 	lds	r24, 0x06FD
     ea0:	88 60       	ori	r24, 0x08	; 8
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <zloz_pakiet+0x1f0>
else					dane[5]&=~(0x08);
     ea4:	80 91 fd 06 	lds	r24, 0x06FD
     ea8:	87 7f       	andi	r24, 0xF7	; 247
     eaa:	80 93 fd 06 	sts	0x06FD, r24
if (stan[21]==0x01)	dane[5]|=0x10;
     eae:	85 89       	ldd	r24, Z+21	; 0x15
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	21 f4       	brne	.+8      	; 0xebc <zloz_pakiet+0x202>
     eb4:	80 91 fd 06 	lds	r24, 0x06FD
     eb8:	80 61       	ori	r24, 0x10	; 16
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <zloz_pakiet+0x208>
else					dane[5]&=~(0x10);
     ebc:	80 91 fd 06 	lds	r24, 0x06FD
     ec0:	8f 7e       	andi	r24, 0xEF	; 239
     ec2:	80 93 fd 06 	sts	0x06FD, r24
if (stan[22]==0x01)	dane[5]|=0x20;
     ec6:	86 89       	ldd	r24, Z+22	; 0x16
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	21 f4       	brne	.+8      	; 0xed4 <zloz_pakiet+0x21a>
     ecc:	80 91 fd 06 	lds	r24, 0x06FD
     ed0:	80 62       	ori	r24, 0x20	; 32
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <zloz_pakiet+0x220>
else					dane[5]&=~(0x20);
     ed4:	80 91 fd 06 	lds	r24, 0x06FD
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	80 93 fd 06 	sts	0x06FD, r24
if (stan[23]==0x01)	dane[5]|=0x40;
     ede:	87 89       	ldd	r24, Z+23	; 0x17
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	21 f4       	brne	.+8      	; 0xeec <zloz_pakiet+0x232>
     ee4:	80 91 fd 06 	lds	r24, 0x06FD
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <zloz_pakiet+0x238>
else					dane[5]&=~(0x40);
     eec:	80 91 fd 06 	lds	r24, 0x06FD
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	80 93 fd 06 	sts	0x06FD, r24
if (stan[24]==0x01)	dane[5]|=0x80;
     ef6:	80 8d       	ldd	r24, Z+24	; 0x18
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	21 f4       	brne	.+8      	; 0xf04 <zloz_pakiet+0x24a>
     efc:	80 91 fd 06 	lds	r24, 0x06FD
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <zloz_pakiet+0x250>
else					dane[5]&=~(0x80);
     f04:	80 91 fd 06 	lds	r24, 0x06FD
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	80 93 fd 06 	sts	0x06FD, r24
return (0);
}
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	08 95       	ret

00000f14 <SystemInit>:
//-------------------------------------------------------------------------------------------------------------
void SystemInit(void){
// initialize SPI interface
DDRB  |= 1<<PB5 | 1<<PB7; // mosi, sck output
     f14:	84 b1       	in	r24, 0x04	; 4
     f16:	80 6a       	ori	r24, 0xA0	; 160
     f18:	84 b9       	out	0x04, r24	; 4
cbi(DDRB,PINB6); // MISO is input
     f1a:	26 98       	cbi	0x04, 6	; 4
cbi(PORTB,PB5); // MOSI low
     f1c:	2d 98       	cbi	0x05, 5	; 5
cbi(PORTB,PB7); // SCK low
     f1e:	2f 98       	cbi	0x05, 7	; 5
DDRD |= 1<<PD0;
     f20:	50 9a       	sbi	0x0a, 0	; 10
sbi(PORTD,PD0);
     f22:	58 9a       	sbi	0x0b, 0	; 11
SetTimer0;	//deklaracja head.h
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	85 bd       	out	0x25, r24	; 37
     f28:	ee e6       	ldi	r30, 0x6E	; 110
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	80 83       	st	Z, r24
// master mode and Fosc/2 clock:
/*
SPCR = (1<<SPE)|(1<<MSTR);
SPSR |= (1<<SPI2X); 
*/
sei();
     f32:	78 94       	sei

DDRC|=0X00;
     f34:	87 b1       	in	r24, 0x07	; 7
     f36:	87 b9       	out	0x07, r24	; 7
PORTC |= 0Xff;
     f38:	88 b1       	in	r24, 0x08	; 8
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	98 b9       	out	0x08, r25	; 8
DDRA|=0X00;
     f3e:	81 b1       	in	r24, 0x01	; 1
     f40:	81 b9       	out	0x01, r24	; 1
PORTA |= 0Xff;
     f42:	82 b1       	in	r24, 0x02	; 2
     f44:	92 b9       	out	0x02, r25	; 2
	
DDRD&=~(_BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7));
     f46:	8a b1       	in	r24, 0x0a	; 10
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	8a b9       	out	0x0a, r24	; 10
PORTD|=(_BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7));
     f4c:	8b b1       	in	r24, 0x0b	; 11
     f4e:	80 6f       	ori	r24, 0xF0	; 240
     f50:	8b b9       	out	0x0b, r24	; 11
	
DDRB&=~(_BV(PB0)|_BV(PB1)|_BV(PB2)|_BV(PB3));
     f52:	84 b1       	in	r24, 0x04	; 4
     f54:	80 7f       	andi	r24, 0xF0	; 240
     f56:	84 b9       	out	0x04, r24	; 4
PORTB|=(_BV(PB0)|_BV(PB1)|_BV(PB2)|_BV(PB3));
     f58:	85 b1       	in	r24, 0x05	; 5
     f5a:	8f 60       	ori	r24, 0x0F	; 15
     f5c:	85 b9       	out	0x05, r24	; 5
	
DDRD|=_BV(PD3);
     f5e:	53 9a       	sbi	0x0a, 3	; 10
//	PORTD|=_BV(PD3);
}
     f60:	08 95       	ret

00000f62 <__vector_18>:
//---------------------------------------------------------------------------------
SIGNAL(SIG_OVERFLOW0)  //przerwanie wywolywane co 0.01632sek
{ 
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	0f 92       	push	r0
     f6a:	11 24       	eor	r1, r1
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
	reset_time++; //deklaracje w head.h
     f70:	80 91 37 01 	lds	r24, 0x0137
     f74:	90 91 38 01 	lds	r25, 0x0138
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	90 93 38 01 	sts	0x0138, r25
     f7e:	80 93 37 01 	sts	0x0137, r24
	led_delay++;
     f82:	80 91 29 07 	lds	r24, 0x0729
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 93 29 07 	sts	0x0729, r24
}	
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <main>:
char cmdval,led,led_delay;
char dane[26];
int reset_time=0;

//-------------------------------------------------------------------------
int main(void){
     f9a:	af 92       	push	r10
     f9c:	bf 92       	push	r11
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	e2 97       	sbiw	r28, 0x32	; 50
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0

 uint8_t temp[25];
 uint8_t stan[25];

for(int i=0;i<=25;++i){
	stan[i]=0;  
     fc2:	ae 01       	movw	r20, r28
     fc4:	46 5e       	subi	r20, 0xE6	; 230
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
	temp[i]=0;
     fc8:	9e 01       	movw	r18, r28
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255

 uint8_t temp[25];
 uint8_t stan[25];

for(int i=0;i<=25;++i){
	stan[i]=0;  
     fce:	fa 01       	movw	r30, r20
     fd0:	e8 0f       	add	r30, r24
     fd2:	f9 1f       	adc	r31, r25
     fd4:	10 82       	st	Z, r1
	temp[i]=0;
     fd6:	f9 01       	movw	r30, r18
     fd8:	e8 0f       	add	r30, r24
     fda:	f9 1f       	adc	r31, r25
     fdc:	10 82       	st	Z, r1
int main(void){

 uint8_t temp[25];
 uint8_t stan[25];

for(int i=0;i<=25;++i){
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	8a 31       	cpi	r24, 0x1A	; 26
     fe2:	91 05       	cpc	r25, r1
     fe4:	a1 f7       	brne	.-24     	; 0xfce <main+0x34>
	stan[i]=0;  
	temp[i]=0;
	}

SystemInit();
     fe6:	0e 94 8a 07 	call	0xf14	; 0xf14 <SystemInit>
/*initialize enc28j60*/
enc28j60Init(mymac);
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 2d 01 	call	0x25a	; 0x25a <enc28j60Init>
// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
enc28j60PhyWrite(PHLCON,0x476);
     ff2:	84 e1       	ldi	r24, 0x14	; 20
     ff4:	66 e7       	ldi	r22, 0x76	; 118
     ff6:	74 e0       	ldi	r23, 0x04	; 4
     ff8:	0e 94 09 01 	call	0x212	; 0x212 <enc28j60PhyWrite>
//delay_ms(20); 
init_ip_arp_udp_tcp(mymac,myip,80);
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	68 e0       	ldi	r22, 0x08	; 8
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	40 e5       	ldi	r20, 0x50	; 80
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	0e 94 4c 03 	call	0x698	; 0x698 <init_ip_arp_udp_tcp>
reset_time=0;
    100c:	10 92 38 01 	sts	0x0138, r1
    1010:	10 92 37 01 	sts	0x0137, r1
		// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
		// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
		enc28j60PhyWrite(PHLCON,0x476);
		init_ip_arp_udp_tcp(mymac,myip,80);
		reset_time = 0;
		zmiana = 1;
    1014:	01 e0       	ldi	r16, 0x01	; 1
			}
		}
	else{ 
	    stan[24]=0x00;
	    if(temp[24]==1){
			zloz_pakiet(stan);
    1016:	4a e1       	ldi	r20, 0x1A	; 26
    1018:	e4 2e       	mov	r14, r20
    101a:	f1 2c       	mov	r15, r1
    101c:	ec 0e       	add	r14, r28
    101e:	fd 1e       	adc	r15, r29
        while(i<6){
            buf[ETH_DST_MAC +i]=mymac[i]; // gw mac in local lan or host mac
            buf[ETH_SRC_MAC +i]=mac_centr[i];
            i++;
			}
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    1020:	38 e0       	ldi	r19, 0x08	; 8
    1022:	c3 2e       	mov	r12, r19
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
		memcpy(buf+IP_P,iphdr,9);
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
    1024:	21 e1       	ldi	r18, 0x11	; 17
    1026:	b2 2e       	mov	r11, r18
            buf[IP_DST_P+i]=myip[i];
            buf[IP_SRC_P+i]=dstip[i];
            i++;
			}
        // done in transmit: fill_ip_hdr_checksum(buf);
		buf[UDP_SRC_PORT_H_P]=4;
    1028:	94 e0       	ldi	r25, 0x04	; 4
    102a:	a9 2e       	mov	r10, r25
		buf[UDP_SRC_PORT_L_P]=0xb0;
    102c:	80 eb       	ldi	r24, 0xB0	; 176
    102e:	d8 2e       	mov	r13, r24
reset_time=0;

while(1){ 

//----------------------------------------------------------------------------	
	if(reset_time==306) //co 5sek 16MHz/1024 /T0=255
    1030:	80 91 37 01 	lds	r24, 0x0137
    1034:	90 91 38 01 	lds	r25, 0x0138
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	82 33       	cpi	r24, 0x32	; 50
    103c:	92 07       	cpc	r25, r18
    103e:	11 f4       	brne	.+4      	; 0x1044 <main+0xaa>
	{
		cbi(PORTD,PD0); //SCK low
    1040:	58 98       	cbi	0x0b, 0	; 11
    1042:	24 c0       	rjmp	.+72     	; 0x108c <main+0xf2>
	}
	if(reset_time==307)
    1044:	a1 e0       	ldi	r26, 0x01	; 1
    1046:	83 33       	cpi	r24, 0x33	; 51
    1048:	9a 07       	cpc	r25, r26
    104a:	11 f4       	brne	.+4      	; 0x1050 <main+0xb6>
	{
		sbi(PORTD,PD0);
    104c:	58 9a       	sbi	0x0b, 0	; 11
    104e:	1e c0       	rjmp	.+60     	; 0x108c <main+0xf2>
	}	
	if(reset_time>=308)
    1050:	84 53       	subi	r24, 0x34	; 52
    1052:	91 40       	sbci	r25, 0x01	; 1
    1054:	dc f0       	brlt	.+54     	; 0x108c <main+0xf2>
	{
		reset_time = 0;
    1056:	10 92 38 01 	sts	0x0138, r1
    105a:	10 92 37 01 	sts	0x0137, r1
		enc28j60Init(mymac);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 2d 01 	call	0x25a	; 0x25a <enc28j60Init>
		// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
		// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
		enc28j60PhyWrite(PHLCON,0x476);
    1066:	84 e1       	ldi	r24, 0x14	; 20
    1068:	66 e7       	ldi	r22, 0x76	; 118
    106a:	74 e0       	ldi	r23, 0x04	; 4
    106c:	0e 94 09 01 	call	0x212	; 0x212 <enc28j60PhyWrite>
		init_ip_arp_udp_tcp(mymac,myip,80);
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	68 e0       	ldi	r22, 0x08	; 8
    1076:	71 e0       	ldi	r23, 0x01	; 1
    1078:	40 e5       	ldi	r20, 0x50	; 80
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 4c 03 	call	0x698	; 0x698 <init_ip_arp_udp_tcp>
		reset_time = 0;
    1080:	10 92 38 01 	sts	0x0138, r1
    1084:	10 92 37 01 	sts	0x0137, r1
		zmiana = 1;
    1088:	00 93 e6 06 	sts	0x06E6, r16
	} 
//--------------------------------------------------------------------------
	if(led==1){led_delay=0;cbi(PORTD,PD3);}
    108c:	80 91 22 07 	lds	r24, 0x0722
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	19 f4       	brne	.+6      	; 0x109a <main+0x100>
    1094:	10 92 29 07 	sts	0x0729, r1
    1098:	5b 98       	cbi	0x0b, 3	; 11
	if(led_delay>=5){sbi(PORTD,PD3);}	
    109a:	80 91 29 07 	lds	r24, 0x0729
    109e:	85 30       	cpi	r24, 0x05	; 5
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <main+0x10a>
    10a2:	5b 9a       	sbi	0x0b, 3	; 11
		led=0;	
    10a4:	10 92 22 07 	sts	0x0722, r1
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
//--------------------------------------------------------------------------
	if(!(In1)){    
    10aa:	4d 99       	sbic	0x09, 5	; 9
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <main+0x122>
		stan[1]=0x01;
    10ae:	0b 8f       	std	Y+27, r16	; 0x1b
   	    if(temp[1]==0){
    10b0:	88 23       	and	r24, r24
    10b2:	51 f4       	brne	.+20     	; 0x10c8 <main+0x12e>
			zmiana=1;
    10b4:	00 93 e6 06 	sts	0x06E6, r16
			temp[1]=1;
    10b8:	0a 83       	std	Y+2, r16	; 0x02
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <main+0x12e>
			}
		}
   	else{ 
        stan[1]=0x00;
    10bc:	1b 8e       	std	Y+27, r1	; 0x1b
		if(temp[1]==1){
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <main+0x12e>
			zmiana=1;
    10c2:	80 93 e6 06 	sts	0x06E6, r24
			temp[1]=0;
    10c6:	1a 82       	std	Y+2, r1	; 0x02
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
			}
		}
	if(!(In2)){    
    10ca:	4c 99       	sbic	0x09, 4	; 9
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <main+0x142>
		stan[2]=0x01;
    10ce:	0c 8f       	std	Y+28, r16	; 0x1c
   	    if(temp[2]==0){
    10d0:	88 23       	and	r24, r24
    10d2:	51 f4       	brne	.+20     	; 0x10e8 <main+0x14e>
			zmiana=1;
    10d4:	00 93 e6 06 	sts	0x06E6, r16
			temp[2]=1;
    10d8:	0b 83       	std	Y+3, r16	; 0x03
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <main+0x14e>
			}
		}
	else{ 
        stan[2]=0x00;
    10dc:	1c 8e       	std	Y+28, r1	; 0x1c
		if(temp[2]==1){
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <main+0x14e>
			zmiana=1;
    10e2:	80 93 e6 06 	sts	0x06E6, r24
			temp[2]=0;
    10e6:	1b 82       	std	Y+3, r1	; 0x03
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
			}
		}
	if(!(In3)){    
    10ea:	4f 99       	sbic	0x09, 7	; 9
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <main+0x162>
		stan[3]=0x01;
    10ee:	0d 8f       	std	Y+29, r16	; 0x1d
		if(temp[3]==0){
    10f0:	88 23       	and	r24, r24
    10f2:	51 f4       	brne	.+20     	; 0x1108 <__stack+0x9>
			zmiana=1;
    10f4:	00 93 e6 06 	sts	0x06E6, r16
			temp[3]=1;
    10f8:	0c 83       	std	Y+4, r16	; 0x04
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__stack+0x9>
			}
		}
   	else{ 
        stan[3]=0x00;
    10fc:	1d 8e       	std	Y+29, r1	; 0x1d
		if(temp[3]==1){
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	19 f4       	brne	.+6      	; 0x1108 <__stack+0x9>
			zmiana=1;
    1102:	80 93 e6 06 	sts	0x06E6, r24
			temp[3]=0;
    1106:	1c 82       	std	Y+4, r1	; 0x04
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
			}
		}
    if(!(In4)){    
    110a:	4e 99       	sbic	0x09, 6	; 9
    110c:	07 c0       	rjmp	.+14     	; 0x111c <__stack+0x1d>
		stan[4]=0x01;
    110e:	0e 8f       	std	Y+30, r16	; 0x1e
		if(temp[4]==0){
    1110:	88 23       	and	r24, r24
    1112:	51 f4       	brne	.+20     	; 0x1128 <__stack+0x29>
			zmiana=1;
    1114:	00 93 e6 06 	sts	0x06E6, r16
			temp[4]=1;
    1118:	0d 83       	std	Y+5, r16	; 0x05
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <__stack+0x29>
			}
		}
    else{ 
	    stan[4]=0x00;
    111c:	1e 8e       	std	Y+30, r1	; 0x1e
	    if(temp[4]==1){
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	19 f4       	brne	.+6      	; 0x1128 <__stack+0x29>
			zmiana=1;
    1122:	80 93 e6 06 	sts	0x06E6, r24
			temp[4]=0;
    1126:	1d 82       	std	Y+5, r1	; 0x05
    1128:	8e 81       	ldd	r24, Y+6	; 0x06
			}
		}
    if(!(In5)){    
    112a:	31 99       	sbic	0x06, 1	; 6
    112c:	07 c0       	rjmp	.+14     	; 0x113c <__stack+0x3d>
        stan[5]=0x01;
    112e:	0f 8f       	std	Y+31, r16	; 0x1f
	    if(temp[5]==0){
    1130:	88 23       	and	r24, r24
    1132:	51 f4       	brne	.+20     	; 0x1148 <__stack+0x49>
			zmiana=1;
    1134:	00 93 e6 06 	sts	0x06E6, r16
			temp[5]=1;
    1138:	0e 83       	std	Y+6, r16	; 0x06
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <__stack+0x49>
			}
		}
    else{ 
	    stan[5]=0x00;
    113c:	1f 8e       	std	Y+31, r1	; 0x1f
	    if(temp[5]==1){
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	19 f4       	brne	.+6      	; 0x1148 <__stack+0x49>
			zmiana=1;
    1142:	80 93 e6 06 	sts	0x06E6, r24
			temp[5]=0;
    1146:	1e 82       	std	Y+6, r1	; 0x06
    1148:	8f 81       	ldd	r24, Y+7	; 0x07
			}
		}
    if(!(In6)){    
    114a:	30 99       	sbic	0x06, 0	; 6
    114c:	07 c0       	rjmp	.+14     	; 0x115c <__stack+0x5d>
        stan[6]=0x01;
    114e:	08 a3       	std	Y+32, r16	; 0x20
	    if(temp[6]==0){
    1150:	88 23       	and	r24, r24
    1152:	51 f4       	brne	.+20     	; 0x1168 <__stack+0x69>
			zmiana=1;
    1154:	00 93 e6 06 	sts	0x06E6, r16
			temp[6]=1;
    1158:	0f 83       	std	Y+7, r16	; 0x07
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <__stack+0x69>
			}
		}
	else{ 
	    stan[6]=0x00;
    115c:	18 a2       	std	Y+32, r1	; 0x20
	    if(temp[6]==1){
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	19 f4       	brne	.+6      	; 0x1168 <__stack+0x69>
			zmiana=1;
    1162:	80 93 e6 06 	sts	0x06E6, r24
			temp[6]=0;
    1166:	1f 82       	std	Y+7, r1	; 0x07
    1168:	88 85       	ldd	r24, Y+8	; 0x08
			}
		}
    if(!(In7)){    
    116a:	33 99       	sbic	0x06, 3	; 6
    116c:	07 c0       	rjmp	.+14     	; 0x117c <__stack+0x7d>
        stan[7]=0x01;
    116e:	09 a3       	std	Y+33, r16	; 0x21
	    if(temp[7]==0){
    1170:	88 23       	and	r24, r24
    1172:	51 f4       	brne	.+20     	; 0x1188 <__stack+0x89>
			zmiana=1;
    1174:	00 93 e6 06 	sts	0x06E6, r16
			temp[7]=1;
    1178:	08 87       	std	Y+8, r16	; 0x08
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <__stack+0x89>
			}
		}
	else{ 
	    stan[7]=0x00;
    117c:	19 a2       	std	Y+33, r1	; 0x21
	    if(temp[7]==1){
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	19 f4       	brne	.+6      	; 0x1188 <__stack+0x89>
			zmiana=1;
    1182:	80 93 e6 06 	sts	0x06E6, r24
			temp[7]=0;
    1186:	18 86       	std	Y+8, r1	; 0x08
    1188:	89 85       	ldd	r24, Y+9	; 0x09
			}
		}
    if(!(In8)){    
    118a:	32 99       	sbic	0x06, 2	; 6
    118c:	07 c0       	rjmp	.+14     	; 0x119c <__stack+0x9d>
        stan[8]=0x01;
    118e:	0a a3       	std	Y+34, r16	; 0x22
	    if(temp[8]==0){
    1190:	88 23       	and	r24, r24
    1192:	51 f4       	brne	.+20     	; 0x11a8 <__stack+0xa9>
			zmiana=1;
    1194:	00 93 e6 06 	sts	0x06E6, r16
			temp[8]=1;
    1198:	09 87       	std	Y+9, r16	; 0x09
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <__stack+0xa9>
			}
		}
	else{ 
	    stan[8]=0x00;
    119c:	1a a2       	std	Y+34, r1	; 0x22
	    if(temp[8]==1){
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <__stack+0xa9>
			zmiana=1;
    11a2:	80 93 e6 06 	sts	0x06E6, r24
			temp[8]=0;
    11a6:	19 86       	std	Y+9, r1	; 0x09
    11a8:	8a 85       	ldd	r24, Y+10	; 0x0a
			}
		}
    if(!(In9)){    
    11aa:	35 99       	sbic	0x06, 5	; 6
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <__stack+0xbd>
        stan[9]=0x01;
    11ae:	0b a3       	std	Y+35, r16	; 0x23
	    if(temp[9]==0){
    11b0:	88 23       	and	r24, r24
    11b2:	51 f4       	brne	.+20     	; 0x11c8 <__stack+0xc9>
			zmiana=1;
    11b4:	00 93 e6 06 	sts	0x06E6, r16
			temp[9]=1;
    11b8:	0a 87       	std	Y+10, r16	; 0x0a
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <__stack+0xc9>
			}
		}
	else{ 
	    stan[9]=0x00;
    11bc:	1b a2       	std	Y+35, r1	; 0x23
	    if(temp[9]==1){
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	19 f4       	brne	.+6      	; 0x11c8 <__stack+0xc9>
			zmiana=1;
    11c2:	80 93 e6 06 	sts	0x06E6, r24
			temp[9]=0;
    11c6:	1a 86       	std	Y+10, r1	; 0x0a
    11c8:	8b 85       	ldd	r24, Y+11	; 0x0b
			}
		}
    if(!(In10)){    
    11ca:	34 99       	sbic	0x06, 4	; 6
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <__stack+0xdd>
        stan[10]=0x01;
    11ce:	0c a3       	std	Y+36, r16	; 0x24
	    if(temp[10]==0){
    11d0:	88 23       	and	r24, r24
    11d2:	51 f4       	brne	.+20     	; 0x11e8 <__stack+0xe9>
			zmiana=1;
    11d4:	00 93 e6 06 	sts	0x06E6, r16
			temp[10]=1;
    11d8:	0b 87       	std	Y+11, r16	; 0x0b
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <__stack+0xe9>
			}
		}
	else{ 
	    stan[10]=0x00;
    11dc:	1c a2       	std	Y+36, r1	; 0x24
	    if(temp[10]==1){
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	19 f4       	brne	.+6      	; 0x11e8 <__stack+0xe9>
			zmiana=1;
    11e2:	80 93 e6 06 	sts	0x06E6, r24
			temp[10]=0;
    11e6:	1b 86       	std	Y+11, r1	; 0x0b
    11e8:	8c 85       	ldd	r24, Y+12	; 0x0c
			}
		}
	if(!(In11)){    
    11ea:	37 99       	sbic	0x06, 7	; 6
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <__stack+0xfd>
        stan[11]=0x01;
    11ee:	0d a3       	std	Y+37, r16	; 0x25
	    if(temp[11]==0){
    11f0:	88 23       	and	r24, r24
    11f2:	51 f4       	brne	.+20     	; 0x1208 <__stack+0x109>
			zmiana=1;
    11f4:	00 93 e6 06 	sts	0x06E6, r16
			temp[11]=1;
    11f8:	0c 87       	std	Y+12, r16	; 0x0c
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <__stack+0x109>
			}
		}
	else{ 
	    stan[11]=0x00;
    11fc:	1d a2       	std	Y+37, r1	; 0x25
	    if(temp[11]==1){
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	19 f4       	brne	.+6      	; 0x1208 <__stack+0x109>
			zmiana=1;
    1202:	80 93 e6 06 	sts	0x06E6, r24
			temp[11]=0;
    1206:	1c 86       	std	Y+12, r1	; 0x0c
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
			}
		}
    if(!(In12)){    
    120a:	36 99       	sbic	0x06, 6	; 6
    120c:	07 c0       	rjmp	.+14     	; 0x121c <__stack+0x11d>
        stan[12]=0x01;
    120e:	0e a3       	std	Y+38, r16	; 0x26
	    if(temp[12]==0){
    1210:	88 23       	and	r24, r24
    1212:	51 f4       	brne	.+20     	; 0x1228 <__stack+0x129>
			zmiana=1;
    1214:	00 93 e6 06 	sts	0x06E6, r16
			temp[12]=1;
    1218:	0d 87       	std	Y+13, r16	; 0x0d
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <__stack+0x129>
			}
		}
	else{ 
	    stan[12]=0x00;
    121c:	1e a2       	std	Y+38, r1	; 0x26
	    if(temp[12]==1){
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	19 f4       	brne	.+6      	; 0x1228 <__stack+0x129>
			zmiana=1;
    1222:	80 93 e6 06 	sts	0x06E6, r24
			temp[12]=0;
    1226:	1d 86       	std	Y+13, r1	; 0x0d
    1228:	8e 85       	ldd	r24, Y+14	; 0x0e
			}
		}
    if(!(In13)){    
    122a:	06 99       	sbic	0x00, 6	; 0
    122c:	07 c0       	rjmp	.+14     	; 0x123c <__stack+0x13d>
        stan[13]=0x01;
    122e:	0f a3       	std	Y+39, r16	; 0x27
	    if(temp[13]==0){
    1230:	88 23       	and	r24, r24
    1232:	51 f4       	brne	.+20     	; 0x1248 <__stack+0x149>
			zmiana=1;
    1234:	00 93 e6 06 	sts	0x06E6, r16
			temp[13]=1;
    1238:	0e 87       	std	Y+14, r16	; 0x0e
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <__stack+0x149>
			}
		}
	else{ 
	    stan[13]=0x00;
    123c:	1f a2       	std	Y+39, r1	; 0x27
	    if(temp[13]==1){
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	19 f4       	brne	.+6      	; 0x1248 <__stack+0x149>
			zmiana=1;
    1242:	80 93 e6 06 	sts	0x06E6, r24
			temp[13]=0;
    1246:	1e 86       	std	Y+14, r1	; 0x0e
    1248:	8f 85       	ldd	r24, Y+15	; 0x0f
			}
		}
    if(!(In14)){    
    124a:	07 99       	sbic	0x00, 7	; 0
    124c:	07 c0       	rjmp	.+14     	; 0x125c <__stack+0x15d>
        stan[14]=0x01;
    124e:	08 a7       	std	Y+40, r16	; 0x28
	    if(temp[14]==0){
    1250:	88 23       	and	r24, r24
    1252:	51 f4       	brne	.+20     	; 0x1268 <__stack+0x169>
			zmiana=1;
    1254:	00 93 e6 06 	sts	0x06E6, r16
			temp[14]=1;
    1258:	0f 87       	std	Y+15, r16	; 0x0f
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <__stack+0x169>
			}
		}
	else{ 
	    stan[14]=0x00;
    125c:	18 a6       	std	Y+40, r1	; 0x28
	    if(temp[14]==1){
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	19 f4       	brne	.+6      	; 0x1268 <__stack+0x169>
			zmiana=1;
    1262:	80 93 e6 06 	sts	0x06E6, r24
			temp[14]=0;
    1266:	1f 86       	std	Y+15, r1	; 0x0f
    1268:	88 89       	ldd	r24, Y+16	; 0x10
			}
		}
    if(!(In15)){    
    126a:	04 99       	sbic	0x00, 4	; 0
    126c:	07 c0       	rjmp	.+14     	; 0x127c <__stack+0x17d>
        stan[15]=0x01;
    126e:	09 a7       	std	Y+41, r16	; 0x29
	    if(temp[15]==0){
    1270:	88 23       	and	r24, r24
    1272:	51 f4       	brne	.+20     	; 0x1288 <__stack+0x189>
			zmiana=1;
    1274:	00 93 e6 06 	sts	0x06E6, r16
			temp[15]=1;
    1278:	08 8b       	std	Y+16, r16	; 0x10
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <__stack+0x189>
			}
		}
	else{ 
	    stan[15]=0x00;
    127c:	19 a6       	std	Y+41, r1	; 0x29
	    if(temp[15]==1){
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	19 f4       	brne	.+6      	; 0x1288 <__stack+0x189>
			zmiana=1;
    1282:	80 93 e6 06 	sts	0x06E6, r24
			temp[15]=0;
    1286:	18 8a       	std	Y+16, r1	; 0x10
    1288:	89 89       	ldd	r24, Y+17	; 0x11
			}
		} 
    if(!(In16)){    
    128a:	05 99       	sbic	0x00, 5	; 0
    128c:	07 c0       	rjmp	.+14     	; 0x129c <__stack+0x19d>
        stan[16]=0x01;
    128e:	0a a7       	std	Y+42, r16	; 0x2a
	    if(temp[16]==0){
    1290:	88 23       	and	r24, r24
    1292:	51 f4       	brne	.+20     	; 0x12a8 <__stack+0x1a9>
			zmiana=1;
    1294:	00 93 e6 06 	sts	0x06E6, r16
			temp[16]=1;
    1298:	09 8b       	std	Y+17, r16	; 0x11
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <__stack+0x1a9>
			}
		}
	else{ 
	    stan[16]=0x00;
    129c:	1a a6       	std	Y+42, r1	; 0x2a
	    if(temp[16]==1){
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	19 f4       	brne	.+6      	; 0x12a8 <__stack+0x1a9>
			zmiana=1;
    12a2:	80 93 e6 06 	sts	0x06E6, r24
			temp[16]=0;
    12a6:	19 8a       	std	Y+17, r1	; 0x11
    12a8:	8a 89       	ldd	r24, Y+18	; 0x12
			}
		}
	if(!(In17)){    
    12aa:	02 99       	sbic	0x00, 2	; 0
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <__stack+0x1bd>
        stan[17]=0x01;
    12ae:	0b a7       	std	Y+43, r16	; 0x2b
	    if(temp[17]==0){
    12b0:	88 23       	and	r24, r24
    12b2:	51 f4       	brne	.+20     	; 0x12c8 <__stack+0x1c9>
			zmiana=1;
    12b4:	00 93 e6 06 	sts	0x06E6, r16
			temp[17]=1;
    12b8:	0a 8b       	std	Y+18, r16	; 0x12
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <__stack+0x1c9>
			}
		}
	else{ 
	    stan[17]=0x00;
    12bc:	1b a6       	std	Y+43, r1	; 0x2b
	    if(temp[17]==1){
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <__stack+0x1c9>
			zmiana=1;
    12c2:	80 93 e6 06 	sts	0x06E6, r24
			temp[17]=0;
    12c6:	1a 8a       	std	Y+18, r1	; 0x12
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
			}
		}	
    if(!(In18)){    
    12ca:	03 99       	sbic	0x00, 3	; 0
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <__stack+0x1dd>
        stan[18]=0x01;
    12ce:	0c a7       	std	Y+44, r16	; 0x2c
	    if(temp[18]==0){
    12d0:	88 23       	and	r24, r24
    12d2:	51 f4       	brne	.+20     	; 0x12e8 <__stack+0x1e9>
			zmiana=1;
    12d4:	00 93 e6 06 	sts	0x06E6, r16
			temp[18]=1;
    12d8:	0b 8b       	std	Y+19, r16	; 0x13
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <__stack+0x1e9>
			}
		}
	else{ 
	    stan[18]=0x00;
    12dc:	1c a6       	std	Y+44, r1	; 0x2c
	    if(temp[18]==1){
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <__stack+0x1e9>
			zmiana=1;
    12e2:	80 93 e6 06 	sts	0x06E6, r24
			temp[18]=0;
    12e6:	1b 8a       	std	Y+19, r1	; 0x13
    12e8:	8c 89       	ldd	r24, Y+20	; 0x14
			}
		}
	if(!(In19)){    
    12ea:	00 99       	sbic	0x00, 0	; 0
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <__stack+0x1fd>
        stan[19]=0x01;
    12ee:	0d a7       	std	Y+45, r16	; 0x2d
	    if(temp[19]==0){
    12f0:	88 23       	and	r24, r24
    12f2:	51 f4       	brne	.+20     	; 0x1308 <__stack+0x209>
			zmiana=1;
    12f4:	00 93 e6 06 	sts	0x06E6, r16
			temp[19]=1;
    12f8:	0c 8b       	std	Y+20, r16	; 0x14
    12fa:	06 c0       	rjmp	.+12     	; 0x1308 <__stack+0x209>
			}
		}
	else{ 
	    stan[19]=0x00;
    12fc:	1d a6       	std	Y+45, r1	; 0x2d
	    if(temp[19]==1){
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	19 f4       	brne	.+6      	; 0x1308 <__stack+0x209>
			zmiana=1;
    1302:	80 93 e6 06 	sts	0x06E6, r24
			temp[19]=0;
    1306:	1c 8a       	std	Y+20, r1	; 0x14
    1308:	8d 89       	ldd	r24, Y+21	; 0x15
			}
		}
    if(!(In20)){    
    130a:	01 99       	sbic	0x00, 1	; 0
    130c:	07 c0       	rjmp	.+14     	; 0x131c <__stack+0x21d>
        stan[20]=0x01;
    130e:	0e a7       	std	Y+46, r16	; 0x2e
	    if(temp[20]==0){
    1310:	88 23       	and	r24, r24
    1312:	51 f4       	brne	.+20     	; 0x1328 <__stack+0x229>
			zmiana=1;
    1314:	00 93 e6 06 	sts	0x06E6, r16
			temp[20]=1;
    1318:	0d 8b       	std	Y+21, r16	; 0x15
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <__stack+0x229>
			}
		}
	else{ 
	    stan[20]=0x00;
    131c:	1e a6       	std	Y+46, r1	; 0x2e
	    if(temp[20]==1){
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	19 f4       	brne	.+6      	; 0x1328 <__stack+0x229>
		zmiana=1;
    1322:	80 93 e6 06 	sts	0x06E6, r24
	    temp[20]=0;
    1326:	1d 8a       	std	Y+21, r1	; 0x15
    1328:	8e 89       	ldd	r24, Y+22	; 0x16
	    }
   	}	
	if(!(In21)){    
    132a:	19 99       	sbic	0x03, 1	; 3
    132c:	07 c0       	rjmp	.+14     	; 0x133c <__stack+0x23d>
        stan[21]=0x01;
    132e:	0f a7       	std	Y+47, r16	; 0x2f
	    if(temp[21]==0){
    1330:	88 23       	and	r24, r24
    1332:	51 f4       	brne	.+20     	; 0x1348 <__stack+0x249>
			zmiana=1;
    1334:	00 93 e6 06 	sts	0x06E6, r16
			temp[21]=1;
    1338:	0e 8b       	std	Y+22, r16	; 0x16
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <__stack+0x249>
			}
		}
	else{ 
	    stan[21]=0x00;
    133c:	1f a6       	std	Y+47, r1	; 0x2f
	    if(temp[21]==1){
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	19 f4       	brne	.+6      	; 0x1348 <__stack+0x249>
			zmiana=1;
    1342:	80 93 e6 06 	sts	0x06E6, r24
			temp[21]=0;
    1346:	1e 8a       	std	Y+22, r1	; 0x16
    1348:	8f 89       	ldd	r24, Y+23	; 0x17
			}
		}	
    if(!(In22)){    
    134a:	18 99       	sbic	0x03, 0	; 3
    134c:	07 c0       	rjmp	.+14     	; 0x135c <__stack+0x25d>
        stan[22]=0x01;
    134e:	08 ab       	std	Y+48, r16	; 0x30
	    if(temp[22]==0){
    1350:	88 23       	and	r24, r24
    1352:	51 f4       	brne	.+20     	; 0x1368 <__stack+0x269>
			zmiana=1;
    1354:	00 93 e6 06 	sts	0x06E6, r16
			temp[22]=1;
    1358:	0f 8b       	std	Y+23, r16	; 0x17
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <__stack+0x269>
			}
		}
	else{ 
	    stan[22]=0x00;
    135c:	18 aa       	std	Y+48, r1	; 0x30
	    if(temp[22]==1){
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	19 f4       	brne	.+6      	; 0x1368 <__stack+0x269>
			zmiana=1;
    1362:	80 93 e6 06 	sts	0x06E6, r24
			temp[22]=0;
    1366:	1f 8a       	std	Y+23, r1	; 0x17
    1368:	88 8d       	ldd	r24, Y+24	; 0x18
			}
		}	
 	if(!(In23)){    
    136a:	1b 99       	sbic	0x03, 3	; 3
    136c:	07 c0       	rjmp	.+14     	; 0x137c <__stack+0x27d>
        stan[23]=0x01;
    136e:	09 ab       	std	Y+49, r16	; 0x31
	    if(temp[23]==0){
    1370:	88 23       	and	r24, r24
    1372:	51 f4       	brne	.+20     	; 0x1388 <__stack+0x289>
			zmiana=1;
    1374:	00 93 e6 06 	sts	0x06E6, r16
			temp[23]=1;
    1378:	08 8f       	std	Y+24, r16	; 0x18
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <__stack+0x289>
			}
		}
	else{ 
	    stan[23]=0x00;
    137c:	19 aa       	std	Y+49, r1	; 0x31
	    if(temp[23]==1){
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	19 f4       	brne	.+6      	; 0x1388 <__stack+0x289>
			zmiana=1;
    1382:	80 93 e6 06 	sts	0x06E6, r24
			temp[23]=0;
    1386:	18 8e       	std	Y+24, r1	; 0x18
    1388:	19 8d       	ldd	r17, Y+25	; 0x19
			}
		}	
    if(!(In24)){    
    138a:	1a 99       	sbic	0x03, 2	; 3
    138c:	07 c0       	rjmp	.+14     	; 0x139c <__stack+0x29d>
        stan[24]=0x01;
    138e:	0a ab       	std	Y+50, r16	; 0x32
	    if(temp[24]==0){
    1390:	11 23       	and	r17, r17
    1392:	69 f4       	brne	.+26     	; 0x13ae <__stack+0x2af>
			zmiana=1;
    1394:	00 93 e6 06 	sts	0x06E6, r16
			temp[24]=1;
    1398:	09 8f       	std	Y+25, r16	; 0x19
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <__stack+0x2af>
			}
		}
	else{ 
	    stan[24]=0x00;
    139c:	1a aa       	std	Y+50, r1	; 0x32
	    if(temp[24]==1){
    139e:	11 30       	cpi	r17, 0x01	; 1
    13a0:	31 f4       	brne	.+12     	; 0x13ae <__stack+0x2af>
			zloz_pakiet(stan);
    13a2:	c7 01       	movw	r24, r14
    13a4:	0e 94 5d 06 	call	0xcba	; 0xcba <zloz_pakiet>
			zmiana=1;
    13a8:	10 93 e6 06 	sts	0x06E6, r17
			temp[24]=0;
    13ac:	19 8e       	std	Y+25, r1	; 0x19
	    }
   	}	
	
	if(zmiana==1){zloz_pakiet(stan);led=1;}
    13ae:	10 91 e6 06 	lds	r17, 0x06E6
    13b2:	11 30       	cpi	r17, 0x01	; 1
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <__stack+0x2c1>
    13b6:	c7 01       	movw	r24, r14
    13b8:	0e 94 5d 06 	call	0xcba	; 0xcba <zloz_pakiet>
    13bc:	10 93 22 07 	sts	0x0722, r17
//--------------------------------------Obs�uga enc---wysy�anie------------------------------------------------------------------
 	if(zmiana==1){
    13c0:	80 91 e6 06 	lds	r24, 0x06E6
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	09 f0       	breq	.+2      	; 0x13ca <__stack+0x2cb>
    13c8:	58 c0       	rjmp	.+176    	; 0x147a <__stack+0x37b>
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	11 c0       	rjmp	.+34     	; 0x13f0 <__stack+0x2f1>

        i=0;
        while(i<6){
            buf[ETH_DST_MAC +i]=mymac[i]; // gw mac in local lan or host mac
    13ce:	e9 2f       	mov	r30, r25
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	9f 01       	movw	r18, r30
    13d4:	27 5c       	subi	r18, 0xC7	; 199
    13d6:	3e 4f       	sbci	r19, 0xFE	; 254
    13d8:	df 01       	movw	r26, r30
    13da:	ae 5f       	subi	r26, 0xFE	; 254
    13dc:	be 4f       	sbci	r27, 0xFE	; 254
    13de:	8c 91       	ld	r24, X
    13e0:	d9 01       	movw	r26, r18
    13e2:	8c 93       	st	X, r24
            buf[ETH_SRC_MAC +i]=mac_centr[i];
    13e4:	e4 5f       	subi	r30, 0xF4	; 244
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	80 81       	ld	r24, Z
    13ea:	16 96       	adiw	r26, 0x06	; 6
    13ec:	8c 93       	st	X, r24
    13ee:	9f 5f       	subi	r25, 0xFF	; 255
	if(zmiana==1){zloz_pakiet(stan);led=1;}
//--------------------------------------Obs�uga enc---wysy�anie------------------------------------------------------------------
 	if(zmiana==1){

        i=0;
        while(i<6){
    13f0:	96 30       	cpi	r25, 0x06	; 6
    13f2:	68 f3       	brcs	.-38     	; 0x13ce <__stack+0x2cf>
    13f4:	90 93 32 01 	sts	0x0132, r25
            buf[ETH_DST_MAC +i]=mymac[i]; // gw mac in local lan or host mac
            buf[ETH_SRC_MAC +i]=mac_centr[i];
            i++;
			}
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    13f8:	c0 92 45 01 	sts	0x0145, r12
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    13fc:	10 92 46 01 	sts	0x0146, r1
		memcpy(buf+IP_P,iphdr,9);
    1400:	a7 e4       	ldi	r26, 0x47	; 71
    1402:	b1 e0       	ldi	r27, 0x01	; 1
    1404:	e2 e1       	ldi	r30, 0x12	; 18
    1406:	f1 e0       	ldi	r31, 0x01	; 1
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	01 90       	ld	r0, Z+
    140c:	0d 92       	st	X+, r0
    140e:	81 50       	subi	r24, 0x01	; 1
    1410:	e1 f7       	brne	.-8      	; 0x140a <__stack+0x30b>
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
    1412:	10 92 49 01 	sts	0x0149, r1
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
    1416:	b0 92 50 01 	sts	0x0150, r11
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	13 c0       	rjmp	.+38     	; 0x1444 <__stack+0x345>
        i=0;
        while(i<4){
            buf[IP_DST_P+i]=myip[i];
    141e:	e9 2f       	mov	r30, r25
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	9f 01       	movw	r18, r30
    1424:	27 5c       	subi	r18, 0xC7	; 199
    1426:	3e 4f       	sbci	r19, 0xFE	; 254
    1428:	df 01       	movw	r26, r30
    142a:	a8 5f       	subi	r26, 0xF8	; 248
    142c:	be 4f       	sbci	r27, 0xFE	; 254
    142e:	8c 91       	ld	r24, X
    1430:	d9 01       	movw	r26, r18
    1432:	5e 96       	adiw	r26, 0x1e	; 30
    1434:	8c 93       	st	X, r24
    1436:	5e 97       	sbiw	r26, 0x1e	; 30
            buf[IP_SRC_P+i]=dstip[i];
    1438:	e5 5e       	subi	r30, 0xE5	; 229
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	80 81       	ld	r24, Z
    143e:	5a 96       	adiw	r26, 0x1a	; 26
    1440:	8c 93       	st	X, r24
    1442:	9f 5f       	subi	r25, 0xFF	; 255
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
    1444:	94 30       	cpi	r25, 0x04	; 4
    1446:	58 f3       	brcs	.-42     	; 0x141e <__stack+0x31f>
    1448:	90 93 32 01 	sts	0x0132, r25
            buf[IP_DST_P+i]=myip[i];
            buf[IP_SRC_P+i]=dstip[i];
            i++;
			}
        // done in transmit: fill_ip_hdr_checksum(buf);
		buf[UDP_SRC_PORT_H_P]=4;
    144c:	a0 92 5b 01 	sts	0x015B, r10
		buf[UDP_SRC_PORT_L_P]=0xb0;
    1450:	d0 92 5c 01 	sts	0x015C, r13
		buf[UDP_DST_PORT_H_P]=4;
		buf[UDP_DST_PORT_H_P]=0xb0;
    1454:	d0 92 5d 01 	sts	0x015D, r13
        buf[UDP_LEN_H_P]=0;
    1458:	10 92 5f 01 	sts	0x015F, r1
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
    145c:	10 92 61 01 	sts	0x0161, r1
        buf[UDP_CHECKSUM_L_P]=0;
    1460:	10 92 62 01 	sts	0x0162, r1
		//zloz_pakiet(kod,alarm,ruch,drzwi_wej);
		
		make_udp_reply_from_request(buf,dane,6,myport);		//by�o 9  ale minimum 64byte 41+ 23 pr�ba - 6 *******************************************************
    1464:	89 e3       	ldi	r24, 0x39	; 57
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	68 ef       	ldi	r22, 0xF8	; 248
    146a:	76 e0       	ldi	r23, 0x06	; 6
    146c:	46 e0       	ldi	r20, 0x06	; 6
    146e:	20 eb       	ldi	r18, 0xB0	; 176
    1470:	34 e0       	ldi	r19, 0x04	; 4
    1472:	0e 94 22 05 	call	0xa44	; 0xa44 <make_udp_reply_from_request>
		zmiana=0; // bylo na poczatku if
    1476:	10 92 e6 06 	sts	0x06E6, r1
   }
 //----------------------------------Obs�uga enc---odbieranie-------------------------------------------------------------------  
    plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    147a:	8a ea       	ldi	r24, 0xAA	; 170
    147c:	95 e0       	ldi	r25, 0x05	; 5
    147e:	69 e3       	ldi	r22, 0x39	; 57
    1480:	71 e0       	ldi	r23, 0x01	; 1
    1482:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60PacketReceive>
    1486:	bc 01       	movw	r22, r24
    1488:	90 93 1d 07 	sts	0x071D, r25
    148c:	80 93 1c 07 	sts	0x071C, r24
    if(plen==0){
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	09 f4       	brne	.+2      	; 0x1496 <__stack+0x397>
    1494:	cd cd       	rjmp	.-1126   	; 0x1030 <main+0x96>
         continue;
        }
	// arp is broadcast if unknown but a host may also
    // verify the mac address by sending it to 
    // a unicast address.
    if(eth_type_is_arp_and_my_ip(buf,plen)){    //odpowiedz na zapytranie arp jezeli moj ip 
    1496:	89 e3       	ldi	r24, 0x39	; 57
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 8a 03 	call	0x714	; 0x714 <eth_type_is_arp_and_my_ip>
    149e:	88 23       	and	r24, r24
    14a0:	29 f0       	breq	.+10     	; 0x14ac <__stack+0x3ad>
        make_arp_answer_from_request(buf);
    14a2:	89 e3       	ldi	r24, 0x39	; 57
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 8a 05 	call	0xb14	; 0xb14 <make_arp_answer_from_request>
    14aa:	c2 cd       	rjmp	.-1148   	; 0x1030 <main+0x96>
   // if(buf[IP_PROTO_P]==IP_PROTO_UDP_V){  //if do pakiet�w broadcastowych  z czasem
	//	memcpy(str1,buf+42,12);
	//	}
		
    // check if ip packets (icmp or udp) are for us:
    if(eth_type_is_ip_and_my_ip(buf,plen)==0){  //to jest siot co przepusza udp i ping
    14ac:	60 91 1c 07 	lds	r22, 0x071C
    14b0:	70 91 1d 07 	lds	r23, 0x071D
    14b4:	89 e3       	ldi	r24, 0x39	; 57
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 a6 03 	call	0x74c	; 0x74c <eth_type_is_ip_and_my_ip>
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <__stack+0x3c3>
    14c0:	b7 cd       	rjmp	.-1170   	; 0x1030 <main+0x96>
        continue;
        }
    if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    14c2:	10 91 50 01 	lds	r17, 0x0150
    14c6:	11 30       	cpi	r17, 0x01	; 1
    14c8:	a1 f4       	brne	.+40     	; 0x14f2 <__stack+0x3f3>
    14ca:	80 91 5b 01 	lds	r24, 0x015B
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <__stack+0x3d5>
    14d2:	ae cd       	rjmp	.-1188   	; 0x1030 <main+0x96>
        // a ping packet, let's send pong
       make_echo_reply_from_request(buf,plen);
    14d4:	60 91 1c 07 	lds	r22, 0x071C
    14d8:	70 91 1d 07 	lds	r23, 0x071D
    14dc:	89 e3       	ldi	r24, 0x39	; 57
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	0e 94 6c 05 	call	0xad8	; 0xad8 <make_echo_reply_from_request>
	   reset_time=0;
    14e4:	10 92 38 01 	sts	0x0138, r1
    14e8:	10 92 37 01 	sts	0x0137, r1
	   led=1;
    14ec:	10 93 22 07 	sts	0x0722, r17
    14f0:	9f cd       	rjmp	.-1218   	; 0x1030 <main+0x96>
       continue;
       }
//if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==(MYUDPPORT>>8)&&buf[UDP_DST_PORT_L_P]==(MYUDPPORT&0xff)){
    if(buf[IP_PROTO_P]==IP_PROTO_UDP_V){   //  czy udp
    14f2:	11 31       	cpi	r17, 0x11	; 17
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <__stack+0x3f9>
    14f6:	9c cd       	rjmp	.-1224   	; 0x1030 <main+0x96>
	    // memcpy(str,buf+42,80);
	    //if (!(PIND & _BV(PD3))) {PORTD|=_BV(PD3);}
		//if (buf[42]==1) zmiana=1;
		reset_time=0;
    14f8:	10 92 38 01 	sts	0x0138, r1
    14fc:	10 92 37 01 	sts	0x0137, r1
		led=1;
    1500:	00 93 22 07 	sts	0x0722, r16
    1504:	95 cd       	rjmp	.-1238   	; 0x1030 <main+0x96>

00001506 <_exit>:
    1506:	f8 94       	cli

00001508 <__stop_program>:
    1508:	ff cf       	rjmp	.-2      	; 0x1508 <__stop_program>
